{
  "address": "0xFA4d530fFD51Da7180602Ae19EC6FE59cB3c303a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "storeAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inGameItemsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "itemSeriesId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "ItemSeriesActivation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BENEFICIARY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STORE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "itemSeriesIds",
          "type": "uint256[]"
        }
      ],
      "name": "activateItemSeries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInGameItems",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "itemSeriesId",
          "type": "uint256"
        }
      ],
      "name": "getItemSeriesPricing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ethPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "erc20Price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "erc20Address",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct InGameItemMarketplace.ItemSeriesPricing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "getItemSeriesPricingLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "itemSeriesPricingMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "erc20Price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "itemIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "itemSeriesIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "qtys",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inGameItemsAddress",
          "type": "address"
        }
      ],
      "name": "setInGameItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer_",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "itemSeriesId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "erc20Price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "erc20Address",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct InGameItemMarketplace.ItemSeriesPricingIn[]",
          "name": "itemSeriesPricingIn",
          "type": "tuple[]"
        }
      ],
      "name": "setupItemSeriesPricing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb744bbf4ec83e3069aac813ece805345dacae9655d07dd7657a07ff17c6184aa",
  "receipt": {
    "to": null,
    "from": "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "contractAddress": "0xFA4d530fFD51Da7180602Ae19EC6FE59cB3c303a",
    "transactionIndex": 1,
    "gasUsed": "3882206",
    "logsBloom": "0x
    "blockHash": "0xc75887f921a01d4b90afd9ab120c821ca246b680751836d89360506794c1944c",
    "transactionHash": "0xb744bbf4ec83e3069aac813ece805345dacae9655d07dd7657a07ff17c6184aa",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32576691,
        "transactionHash": "0xb744bbf4ec83e3069aac813ece805345dacae9655d07dd7657a07ff17c6184aa",
        "address": "0xFA4d530fFD51Da7180602Ae19EC6FE59cB3c303a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc75887f921a01d4b90afd9ab120c821ca246b680751836d89360506794c1944c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32576691,
        "transactionHash": "0xb744bbf4ec83e3069aac813ece805345dacae9655d07dd7657a07ff17c6184aa",
        "address": "0xFA4d530fFD51Da7180602Ae19EC6FE59cB3c303a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc75887f921a01d4b90afd9ab120c821ca246b680751836d89360506794c1944c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32576691,
        "transactionHash": "0xb744bbf4ec83e3069aac813ece805345dacae9655d07dd7657a07ff17c6184aa",
        "address": "0xFA4d530fFD51Da7180602Ae19EC6FE59cB3c303a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d3",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xc75887f921a01d4b90afd9ab120c821ca246b680751836d89360506794c1944c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32576691,
        "transactionHash": "0xb744bbf4ec83e3069aac813ece805345dacae9655d07dd7657a07ff17c6184aa",
        "address": "0xFA4d530fFD51Da7180602Ae19EC6FE59cB3c303a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xc75887f921a01d4b90afd9ab120c821ca246b680751836d89360506794c1944c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 32576691,
        "transactionHash": "0xb744bbf4ec83e3069aac813ece805345dacae9655d07dd7657a07ff17c6184aa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000017b01d63b179ac000000000000000000000000000000000000000000000000098f2f00177c4270000000000000000000000000000000000000000000000df7e95be2fb6b0171ff00000000000000000000000000000000000000000000000009777ee2b3cac8c4000000000000000000000000000000000000000000000df7e9739318ceb2ebab",
        "logIndex": 5,
        "blockHash": "0xc75887f921a01d4b90afd9ab120c821ca246b680751836d89360506794c1944c"
      }
    ],
    "blockNumber": 32576691,
    "cumulativeGasUsed": "3916037",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "0xd8288Ce8348D53887Cb934240B93F5B41B08D4BE",
    "0x759d76795C60b28ddd920EEa61634ECcb7a772AE",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "e35e4c3b2d7cff902033b66798876cc6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storeAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inGameItemsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemSeriesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ItemSeriesActivation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BENEFICIARY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemSeriesIds\",\"type\":\"uint256[]\"}],\"name\":\"activateItemSeries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInGameItems\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemSeriesId\",\"type\":\"uint256\"}],\"name\":\"getItemSeriesPricing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct InGameItemMarketplace.ItemSeriesPricing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getItemSeriesPricingLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemSeriesPricingMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemSeriesIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"qtys\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inGameItemsAddress\",\"type\":\"address\"}],\"name\":\"setInGameItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemSeriesId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct InGameItemMarketplace.ItemSeriesPricingIn[]\",\"name\":\"itemSeriesPricingIn\",\"type\":\"tuple[]\"}],\"name\":\"setupItemSeriesPricing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedForwarder()\":{\"returns\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace/InGameItemMarketplace.sol\":\"InGameItemMarketplace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77b3307c570c582969ea5466f296898ab9fea1f8b61b30f1c73345fe047a89a9\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\",\"keccak256\":\"0xc762358681e3494519a5fff2f7e3f0f74f9c9f395f23b00cdfb45e0fb9ef8170\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Marketplace/InGameItemMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@opengsn/contracts/src/ERC2771Recipient.sol\\\";\\nimport \\\"../NFT/interfaces/IInGameItems.sol\\\";\\n\\ncontract InGameItemMarketplace is\\n    AccessControl,\\n    Pausable,\\n    ERC2771Recipient\\n{\\n    using ECDSA for bytes32;\\n\\n    // can pause minting and transfers\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    // can configure items\\n    bytes32 public constant STORE_ADMIN_ROLE = keccak256(\\\"STORE_ADMIN_ROLE\\\");\\n    // able to withdraw funds\\n    bytes32 public constant BENEFICIARY_ROLE = keccak256(\\\"BENEFICIARY_ROLE\\\");\\n\\n    struct ItemSeriesPricingIn {\\n        uint itemId;\\n        uint itemSeriesId;\\n        uint ethPrice;\\n        uint erc20Price;\\n        address erc20Address;\\n        bool active;\\n    }\\n\\n    struct ItemSeriesPricing {\\n        uint ethPrice;\\n        uint erc20Price;\\n        address erc20Address;\\n        bool active;\\n    }\\n\\n    // itemId => itemSeriesId => ItemSeriesPricing\\n    mapping(uint => ItemSeriesPricing[]) public itemSeriesPricingMap;\\n    // InGameItems contract to interact with\\n    IInGameItems internal _inGameItems;\\n    // nonces for signature verification\\n    mapping(bytes32 => bool) internal _nonces;\\n    // signer for signature verification\\n    address internal _signer;\\n\\n    event ItemSeriesActivation(\\n        uint indexed itemId,\\n        uint indexed itemSeriesId,\\n        bool active\\n    );\\n\\n    constructor(\\n        address admin,\\n        address pauser,\\n        address storeAdmin,\\n        address beneficiary,\\n        address signer_,\\n        address inGameItemsAddress,\\n        address trustedForwarder_\\n    ) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(PAUSER_ROLE, pauser);\\n        _grantRole(STORE_ADMIN_ROLE, storeAdmin);\\n        _grantRole(BENEFICIARY_ROLE, beneficiary);\\n\\n        _inGameItems = IInGameItems(inGameItemsAddress);\\n        _signer = signer_;\\n        _setTrustedForwarder(trustedForwarder_);\\n    }\\n\\n    function purchase(\\n        uint[] calldata itemIds,\\n        uint[] calldata itemSeriesIds,\\n        uint[] calldata qtys,\\n        bytes32 nonce,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) external payable whenNotPaused {\\n        require(\\n            matchAddressSigner(hash, signature),\\n            \\\"InGameItemMarketplace: Message was not signed by signer\\\"\\n        );\\n        require(\\n            !_nonces[nonce],\\n            \\\"InGameItemMarketplace: Nonce was already used\\\"\\n        );\\n        require(\\n            hashTransaction(_msgSender(), itemIds, itemSeriesIds, qtys, nonce) == hash,\\n            \\\"InGameItemMarketplace: Hash mismatch\\\"\\n        );\\n        require(\\n            itemIds.length == itemSeriesIds.length && itemIds.length == qtys.length,\\n            \\\"InGameItemMarketplace: Array length mismatch\\\"\\n        );\\n        require(\\n            itemIds.length > 0,\\n            \\\"InGameItemMarketplace: No items to purchase\\\"\\n        );\\n\\n        uint ethPriceTotal = 0;\\n        uint erc20PriceTotal = 0;\\n        address erc20Address = address(0);\\n\\n        for (uint i = 0; i < itemIds.length; i++) {\\n            require(qtys[i] > 0, \\\"InGameItemMarketplace: Cannot purchase 0 tokens\\\");\\n\\n            ItemSeriesPricing memory itemSeriesPricing = getItemSeriesPricing(itemIds[i], itemSeriesIds[i]);\\n\\n            require(itemSeriesPricing.active, \\\"InGameItemMarketplace: Item series is not active\\\");\\n\\n            // eth price takes precedence, if both are gt 0\\n            if (itemSeriesPricing.ethPrice > 0) {\\n                ethPriceTotal += itemSeriesPricing.ethPrice * qtys[i];\\n            } else {\\n                // in order for this to work optimally, itemSeries need to be ordered by erc20Address\\n                if (erc20Address != itemSeriesPricing.erc20Address) {\\n                    if (erc20PriceTotal > 0 && erc20Address != address(0)) {\\n                        IERC20(erc20Address).transferFrom(_msgSender(), address(this), erc20PriceTotal);\\n                        erc20PriceTotal = 0;\\n                    }\\n                    erc20Address = itemSeriesPricing.erc20Address;\\n                }\\n                if (erc20Address == itemSeriesPricing.erc20Address) {\\n                    erc20PriceTotal += itemSeriesPricing.erc20Price * qtys[i];\\n                }\\n            }\\n        }\\n\\n        require(ethPriceTotal == msg.value, \\\"InGameItemMarketplace: ETH price mismatch\\\");\\n\\n        _nonces[nonce] = true;\\n\\n        if (erc20PriceTotal > 0 && erc20Address != address(0)) {\\n            IERC20(erc20Address).transferFrom(_msgSender(), address(this), erc20PriceTotal);\\n        }\\n\\n        _inGameItems.mint(_msgSender(), itemIds, itemSeriesIds, qtys);\\n    }\\n\\n    function setupItemSeriesPricing(ItemSeriesPricingIn[] calldata itemSeriesPricingIn)\\n    external\\n    onlyRole(STORE_ADMIN_ROLE)\\n    {\\n        for (uint i = 0; i < itemSeriesPricingIn.length; i++) {\\n            ItemSeriesPricingIn memory currentItemSeriesPricingIn = itemSeriesPricingIn[i];\\n            ItemSeriesPricing[] storage itemSeriesForItemId = itemSeriesPricingMap[currentItemSeriesPricingIn.itemId];\\n            require(\\n                itemSeriesForItemId.length >= currentItemSeriesPricingIn.itemSeriesId,\\n                \\\"InGameItemMarketplace: Item series ID mismatch\\\"\\n            );\\n            require(\\n                currentItemSeriesPricingIn.ethPrice > 0 ||\\n                currentItemSeriesPricingIn.erc20Price > 0 && currentItemSeriesPricingIn.erc20Address != address(0),\\n                \\\"InGameItemMarketplace: Price must be defined in either an ERC20 or ETH\\\"\\n            );\\n\\n            ItemSeriesPricing memory newItemSeriesPricing;\\n            newItemSeriesPricing.active = currentItemSeriesPricingIn.active;\\n            newItemSeriesPricing.ethPrice = currentItemSeriesPricingIn.ethPrice;\\n            newItemSeriesPricing.erc20Address = currentItemSeriesPricingIn.erc20Address;\\n            newItemSeriesPricing.erc20Price = currentItemSeriesPricingIn.erc20Price;\\n\\n            if (currentItemSeriesPricingIn.itemSeriesId < itemSeriesForItemId.length) {\\n                itemSeriesForItemId[currentItemSeriesPricingIn.itemSeriesId] = newItemSeriesPricing;\\n            } else {\\n                itemSeriesForItemId.push(newItemSeriesPricing);\\n            }\\n\\n            emit ItemSeriesActivation(\\n                currentItemSeriesPricingIn.itemId,\\n                currentItemSeriesPricingIn.itemSeriesId,\\n                currentItemSeriesPricingIn.active\\n            );\\n        }\\n    }\\n\\n    function activateItemSeries(\\n        bool active,\\n        uint[] calldata itemIds,\\n        uint[] calldata itemSeriesIds\\n    ) external onlyRole(STORE_ADMIN_ROLE) {\\n        require(itemIds.length == itemSeriesIds.length, \\\"InGameItemMarketplace: Array length mismatch\\\");\\n\\n        for (uint i = 0; i < itemIds.length; i++) {\\n            ItemSeriesPricing storage currentItemSeriesPricing = itemSeriesPricingMap[itemIds[i]][itemSeriesIds[i]];\\n            currentItemSeriesPricing.active = active;\\n\\n            emit ItemSeriesActivation(\\n                itemIds[i],\\n                itemSeriesIds[i],\\n                active\\n            );\\n        }\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function withdrawEth(uint amount) external onlyRole(BENEFICIARY_ROLE) {\\n        payable(_msgSender()).transfer(amount);\\n    }\\n\\n    function withdrawErc20(address tokenAddress, uint amount) external onlyRole(BENEFICIARY_ROLE) {\\n        IERC20(tokenAddress).transfer(_msgSender(), amount);\\n    }\\n\\n    function setInGameItems(address inGameItemsAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _inGameItems = IInGameItems(inGameItemsAddress);\\n    }\\n\\n    function setTrustedForwarder(address forwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    function setSigner(address signer_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _signer = signer_;\\n    }\\n\\n    function getSigner() external view returns (address) {\\n        return _signer;\\n    }\\n\\n    function getInGameItems() external view returns (address) {\\n        return address(_inGameItems);\\n    }\\n\\n    function getItemSeriesPricingLength(uint itemId) external view returns (uint) {\\n        return itemSeriesPricingMap[itemId].length;\\n    }\\n\\n    function getItemSeriesPricing(uint itemId, uint itemSeriesId)\\n    public\\n    view\\n    returns (ItemSeriesPricing memory)\\n    {\\n        require(\\n            itemSeriesPricingMap[itemId].length > itemSeriesId,\\n                \\\"InGameItemMarketplace: Item series ID out of bounds\\\"\\n        );\\n\\n        return itemSeriesPricingMap[itemId][itemSeriesId];\\n    }\\n\\n    function hashTransaction(\\n        address sender,\\n        uint[] calldata itemIds,\\n        uint[] calldata itemSeriesIds,\\n        uint[] calldata qtys,\\n        bytes32 nonce\\n    ) internal pure returns(bytes32) {\\n        bytes32 hash = keccak256(abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encodePacked(sender, itemIds, itemSeriesIds, qtys, nonce)))\\n        );\\n\\n        return hash;\\n    }\\n\\n    function matchAddressSigner(bytes32 hash, bytes memory signature) internal view returns(bool) {\\n        return _signer == hash.recover(signature);\\n    }\\n\\n    function _msgSender()\\n    internal\\n    view\\n    override(Context, ERC2771Recipient)\\n    returns (address)\\n    {\\n        return ERC2771Recipient._msgSender();\\n    }\\n\\n    function _msgData()\\n    internal\\n    view\\n    override(Context, ERC2771Recipient)\\n    returns (bytes calldata)\\n    {\\n        return ERC2771Recipient._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x4a586bbfa9a38d2b591f13708086cc3114ce09095dfe64beedf645b7326b3b47\",\"license\":\"MIT\"},\"contracts/NFT/interfaces/IInGameItems.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IInGameItems {\\n    struct Item {\\n        uint itemId;\\n        uint itemType;\\n        uint slots;\\n    }\\n\\n    struct ItemSeries {\\n        uint itemId;\\n        uint itemSeriesId;\\n        uint startingTokenId;\\n        uint editionSize;\\n        uint minted;\\n    }\\n\\n    struct ItemSeriesIn {\\n        uint itemId;\\n        uint itemSeriesId;\\n        uint editionSize;\\n    }\\n\\n    struct ItemSeriesOut {\\n        uint itemId;\\n        uint itemSeriesId;\\n        uint itemType;\\n        uint slots;\\n        uint startingTokenId;\\n        uint editionSize;\\n        uint minted;\\n    }\\n\\n    function mint(address to, uint[] calldata itemIds, uint[] calldata itemSeriesIds, uint[] calldata amounts) external;\\n\\n    function getItem(uint itemId) external returns (Item memory);\\n\\n    function getItemSeries(uint itemId, uint itemSeriesId) external returns (ItemSeriesOut memory);\\n}\\n\",\"keccak256\":\"0xf22ba8e67f1fcf3f1df5db669923b6df723b97eaf0e32dbb43a6e4ea2f7c8192\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620047b7380380620047b7833981810160405281019062000037919062000408565b6000600160006101000a81548160ff021916908315150217905550620000676000801b886200019d60201b60201c565b620000997f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a876200019d60201b60201c565b620000cb7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d3866200019d60201b60201c565b620000fd7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e856200019d60201b60201c565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000190816200028e60201b60201c565b5050505050505062000503565b620001af8282620002d160201b60201c565b6200028a57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200022f6200033b60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000620003526200035760201b62001b841760201c565b905090565b600060146000369050101580156200037c57506200037b336200039960201b60201c565b5b156200039257601436033560601c905062000396565b3390505b90565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000815190506200040281620004e9565b92915050565b600080600080600080600060e0888a0312156200042457600080fd5b6000620004348a828b01620003f1565b9750506020620004478a828b01620003f1565b96505060406200045a8a828b01620003f1565b95505060606200046d8a828b01620003f1565b9450506080620004808a828b01620003f1565b93505060a0620004938a828b01620003f1565b92505060c0620004a68a828b01620003f1565b91505092959891949750929550565b6000620004c282620004c9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620004f481620004b5565b81146200050057600080fd5b50565b6142a480620005136000396000f3fe6080604052600436106101b75760003560e01c80638456cb59116100ec578063ced3a4031161008a578063da74222811610064578063da742228146105ea578063e3946de614610613578063e63ab1e91461063e578063e744502314610669576101b7565b8063ced3a40314610556578063d547741f14610581578063d6b842c1146105aa576101b7565b8063bd1f4b52116100c6578063bd1f4b52146104ae578063c311d049146104d7578063cb7b9c2314610500578063ce1b815f1461052b576101b7565b80638456cb591461042f57806391d1485414610446578063a217fddf14610483576101b7565b80633f4ba83a116101595780635c975abb116101335780635c975abb146103875780636017a20b146103b25780636c19e783146103db5780637ac3c02f14610404576101b7565b80633f4ba83a1461031757806343d496c31461032e578063572b6c051461034a576101b7565b8063248a9ca311610195578063248a9ca31461024b5780632f2ff15d1461028857806336568abe146102b1578063385596ec146102da576101b7565b806301ffc9a7146101bc5780631274d1f5146101f95780631e185ced14610222575b600080fd5b3480156101c857600080fd5b506101e360048036038101906101de9190612dfd565b6106a6565b6040516101f0919061355f565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b9190612b45565b610720565b005b34801561022e57600080fd5b5061024960048036038101906102449190612baa565b610772565b005b34801561025757600080fd5b50610272600480360381019061026d9190612d98565b610b53565b60405161027f919061357a565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190612dc1565b610b72565b005b3480156102bd57600080fd5b506102d860048036038101906102d39190612dc1565b610b93565b005b3480156102e657600080fd5b5061030160048036038101906102fc9190612e4f565b610c16565b60405161030e9190613877565b60405180910390f35b34801561032357600080fd5b5061032c610c36565b005b61034860048036038101906103439190612bef565b610c6b565b005b34801561035657600080fd5b50610371600480360381019061036c9190612b45565b6113a4565b60405161037e919061355f565b60405180910390f35b34801561039357600080fd5b5061039c6113fc565b6040516103a9919061355f565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d49190612d0f565b611413565b005b3480156103e757600080fd5b5061040260048036038101906103fd9190612b45565b61165e565b005b34801561041057600080fd5b506104196116b0565b6040516104269190613484565b60405180910390f35b34801561043b57600080fd5b506104446116da565b005b34801561045257600080fd5b5061046d60048036038101906104689190612dc1565b61170f565b60405161047a919061355f565b60405180910390f35b34801561048f57600080fd5b50610498611779565b6040516104a5919061357a565b60405180910390f35b3480156104ba57600080fd5b506104d560048036038101906104d09190612b6e565b611780565b005b3480156104e357600080fd5b506104fe60048036038101906104f99190612e4f565b611844565b005b34801561050c57600080fd5b506105156118c0565b604051610522919061357a565b60405180910390f35b34801561053757600080fd5b506105406118e4565b60405161054d9190613484565b60405180910390f35b34801561056257600080fd5b5061056b61190c565b604051610578919061357a565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a39190612dc1565b611930565b005b3480156105b657600080fd5b506105d160048036038101906105cc9190612e78565b611951565b6040516105e19493929190613892565b60405180910390f35b3480156105f657600080fd5b50610611600480360381019061060c9190612b45565b6119cb565b005b34801561061f57600080fd5b506106286119e5565b6040516106359190613484565b60405180910390f35b34801561064a57600080fd5b50610653611a0f565b604051610660919061357a565b60405180910390f35b34801561067557600080fd5b50610690600480360381019061068b9190612e78565b611a33565b60405161069d919061385c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610719575061071882611bbb565b5b9050919050565b6000801b61072d81611c25565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d361079c81611c25565b60005b83839050811015610b4d5760008484838181106107e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060c002018036038101906107fb9190612e26565b9050600060026000836000015181526020019081526020016000209050816020015181805490501015610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a9061371c565b60405180910390fd5b6000826040015111806108b75750600082606001511180156108b65750600073ffffffffffffffffffffffffffffffffffffffff16826080015173ffffffffffffffffffffffffffffffffffffffff1614155b5b6108f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ed906137dc565b60405180910390fd5b6108fe6128ef565b8260a0015181606001901515908115158152505082604001518160000181815250508260800151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508260600151816020018181525050818054905083602001511015610a495780828460200151815481106109b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff021916908315150217905550905050610af2565b81819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555050505b826020015183600001517f05eabaccae5157b89020277c06586f88aabdfcc80f9dd2f3b613690da30494108560a00151604051610b2f919061355f565b60405180910390a35050508080610b4590613b48565b91505061079f565b50505050565b6000806000838152602001908152602001600020600101549050919050565b610b7b82610b53565b610b8481611c25565b610b8e8383611c39565b505050565b610b9b611d19565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bff9061383c565b60405180910390fd5b610c128282611d28565b5050565b600060026000838152602001908152602001600020805490509050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610c6081611c25565b610c68611e09565b50565b610c73611e6c565b610c7d8282611eb6565b610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb39061363c565b60405180910390fd5b6004600084815260200190815260200160002060009054906101000a900460ff1615610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d14906136fc565b60405180910390fd5b81610d35610d29611d19565b8b8b8b8b8b8b8b611f23565b14610d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6c9061379c565b60405180910390fd5b8686905089899050148015610d8f57508484905089899050145b610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc59061369c565b60405180910390fd5b60008989905011610e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0b9061381c565b60405180910390fd5b6000806000805b8c8c90508110156111ad576000898983818110610e61577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013511610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f9061375c565b60405180910390fd5b6000610f328e8e84818110610ee6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358d8d85818110610f26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135611a33565b90508060600151610f78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6f9061377c565b60405180910390fd5b600081600001511115610fe657898983818110610fbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358160000151610fd491906139c6565b85610fdf9190613970565b9450611199565b806040015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146111035760008411801561105a5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156110fb578273ffffffffffffffffffffffffffffffffffffffff166323b872dd611083611d19565b30876040518463ffffffff1660e01b81526004016110a39392919061349f565b602060405180830381600087803b1580156110bd57600080fd5b505af11580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f59190612ce6565b50600093505b806040015192505b806040015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561119857898983818110611174577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135816020015161118a91906139c6565b846111959190613970565b93505b5b5080806111a590613b48565b915050610e1b565b503483146111f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e7906137bc565b60405180910390fd5b60016004600088815260200190815260200160002060006101000a81548160ff0219169083151502179055506000821180156112595750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156112f6578073ffffffffffffffffffffffffffffffffffffffff166323b872dd611282611d19565b30856040518463ffffffff1660e01b81526004016112a29392919061349f565b602060405180830381600087803b1580156112bc57600080fd5b505af11580156112d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f49190612ce6565b505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d05159d61133c611d19565b8e8e8e8e8e8e6040518863ffffffff1660e01b815260040161136497969594939291906134d6565b600060405180830381600087803b15801561137e57600080fd5b505af1158015611392573d6000803e3d6000fd5b50505050505050505050505050505050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600160009054906101000a900460ff16905090565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d361143d81611c25565b828290508585905014611485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147c9061369c565b60405180910390fd5b60005b85859050811015611655576000600260008888858181106114d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152602001908152602001600020858584818110611520577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358154811061155e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302019050878160020160146101000a81548160ff0219169083151502179055508484838181106115c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135878784818110611603577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201357f05eabaccae5157b89020277c06586f88aabdfcc80f9dd2f3b613690da30494108a604051611639919061355f565b60405180910390a350808061164d90613b48565b915050611488565b50505050505050565b6000801b61166b81611c25565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61170481611c25565b61170c611f93565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e6117aa81611c25565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6117ce611d19565b846040518363ffffffff1660e01b81526004016117ec929190613536565b602060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190612ce6565b50505050565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e61186e81611c25565b611876611d19565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156118bb573d6000803e3d6000fd5b505050565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d381565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e81565b61193982610b53565b61194281611c25565b61194c8383611d28565b505050565b6002602052816000526040600020818154811061196d57600080fd5b9060005260206000209060030201600091509150508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16905084565b6000801b6119d881611c25565b6119e182611ff5565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b611a3b6128ef565b81600260008581526020019081526020016000208054905011611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a906137fc565b60405180910390fd5b600260008481526020019081526020016000208281548110611ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581525050905092915050565b60006014600036905010158015611ba05750611b9f336113a4565b5b15611bb457601436033560601c9050611bb8565b3390505b90565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611c3681611c31611d19565b612038565b50565b611c43828261170f565b611d1557600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611cba611d19565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611d23611b84565b905090565b611d32828261170f565b15611e0557600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611daa611d19565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611e116120d5565b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e55611d19565b604051611e629190613484565b60405180910390a1565b611e746113fc565b15611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab906136dc565b60405180910390fd5b565b6000611ecb828461211e90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6000808989898989898989604051602001611f459897969594939291906133cb565b60405160208183030381529060405280519060200120604051602001611f6b9190613424565b6040516020818303038152906040528051906020012090508091505098975050505050505050565b611f9b611e6c565b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611fde611d19565b604051611feb9190613484565b60405180910390a1565b806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612042828261170f565b6120d1576120678173ffffffffffffffffffffffffffffffffffffffff166014612145565b6120758360001c6020612145565b60405160200161208692919061344a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c891906135da565b60405180910390fd5b5050565b6120dd6113fc565b61211c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121139061365c565b60405180910390fd5b565b600080600061212d858561243f565b9150915061213a81612491565b819250505092915050565b60606000600283600261215891906139c6565b6121629190613970565b67ffffffffffffffff8111156121a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121d35781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612231577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026122fb91906139c6565b6123059190613970565b90505b60018111156123f1577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061236d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106123aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806123ea90613aed565b9050612308565b5060008414612435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242c9061361c565b60405180910390fd5b8091505092915050565b6000806041835114156124815760008060006020860151925060408601519150606086015160001a9050612475878285856127e2565b9450945050505061248a565b60006002915091505b9250929050565b600060048111156124cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612504577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561250f576127df565b60016004811115612549577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612582577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156125c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ba906135fc565b60405180910390fd5b600260048111156125fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612636577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266e9061367c565b60405180910390fd5b600360048111156126b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156126ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561272b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612722906136bc565b60405180910390fd5b600480811115612764577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561279d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156127de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d59061373c565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561281d5760006003915091506128e6565b601b8560ff16141580156128355750601c8560ff1614155b156128475760006004915091506128e6565b60006001878787876040516000815260200160405260405161286c9493929190613595565b6020604051602081039080840390855afa15801561288e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156128dd576000600192509250506128e6565b80600092509250505b94509492505050565b60405180608001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600061294261293d846138fc565b6138d7565b90508281526020810184848401111561295a57600080fd5b612965848285613aab565b509392505050565b60008135905061297c816141fb565b92915050565b60008083601f84011261299457600080fd5b8235905067ffffffffffffffff8111156129ad57600080fd5b6020830191508360c08202830111156129c557600080fd5b9250929050565b60008083601f8401126129de57600080fd5b8235905067ffffffffffffffff8111156129f757600080fd5b602083019150836020820283011115612a0f57600080fd5b9250929050565b600081359050612a2581614212565b92915050565b600081519050612a3a81614212565b92915050565b600081359050612a4f81614229565b92915050565b600081359050612a6481614240565b92915050565b600082601f830112612a7b57600080fd5b8135612a8b84826020860161292f565b91505092915050565b600060c08284031215612aa657600080fd5b612ab060c06138d7565b90506000612ac084828501612b30565b6000830152506020612ad484828501612b30565b6020830152506040612ae884828501612b30565b6040830152506060612afc84828501612b30565b6060830152506080612b108482850161296d565b60808301525060a0612b2484828501612a16565b60a08301525092915050565b600081359050612b3f81614257565b92915050565b600060208284031215612b5757600080fd5b6000612b658482850161296d565b91505092915050565b60008060408385031215612b8157600080fd5b6000612b8f8582860161296d565b9250506020612ba085828601612b30565b9150509250929050565b60008060208385031215612bbd57600080fd5b600083013567ffffffffffffffff811115612bd757600080fd5b612be385828601612982565b92509250509250929050565b600080600080600080600080600060c08a8c031215612c0d57600080fd5b60008a013567ffffffffffffffff811115612c2757600080fd5b612c338c828d016129cc565b995099505060208a013567ffffffffffffffff811115612c5257600080fd5b612c5e8c828d016129cc565b975097505060408a013567ffffffffffffffff811115612c7d57600080fd5b612c898c828d016129cc565b95509550506060612c9c8c828d01612a40565b9350506080612cad8c828d01612a40565b92505060a08a013567ffffffffffffffff811115612cca57600080fd5b612cd68c828d01612a6a565b9150509295985092959850929598565b600060208284031215612cf857600080fd5b6000612d0684828501612a2b565b91505092915050565b600080600080600060608688031215612d2757600080fd5b6000612d3588828901612a16565b955050602086013567ffffffffffffffff811115612d5257600080fd5b612d5e888289016129cc565b9450945050604086013567ffffffffffffffff811115612d7d57600080fd5b612d89888289016129cc565b92509250509295509295909350565b600060208284031215612daa57600080fd5b6000612db884828501612a40565b91505092915050565b60008060408385031215612dd457600080fd5b6000612de285828601612a40565b9250506020612df38582860161296d565b9150509250929050565b600060208284031215612e0f57600080fd5b6000612e1d84828501612a55565b91505092915050565b600060c08284031215612e3857600080fd5b6000612e4684828501612a94565b91505092915050565b600060208284031215612e6157600080fd5b6000612e6f84828501612b30565b91505092915050565b60008060408385031215612e8b57600080fd5b6000612e9985828601612b30565b9250506020612eaa85828601612b30565b9150509250929050565b612ebd81613a20565b82525050565b612ecc81613a20565b82525050565b612ee3612ede82613a20565b613b91565b82525050565b6000612ef58385613938565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612f2457600080fd5b602083029250612f35838584613aab565b82840190509392505050565b6000612f4d8385613949565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612f7c57600080fd5b602083029250612f8d838584613aab565b82840190509392505050565b612fa281613a32565b82525050565b612fb181613a32565b82525050565b612fc081613a3e565b82525050565b612fd7612fd282613a3e565b613ba3565b82525050565b6000612fe88261392d565b612ff28185613954565b9350613002818560208601613aba565b61300b81613c1d565b840191505092915050565b60006130218261392d565b61302b8185613965565b935061303b818560208601613aba565b80840191505092915050565b6000613054601883613954565b915061305f82613c3b565b602082019050919050565b6000613077602083613954565b915061308282613c64565b602082019050919050565b600061309a603783613954565b91506130a582613c8d565b604082019050919050565b60006130bd601483613954565b91506130c882613cdc565b602082019050919050565b60006130e0601f83613954565b91506130eb82613d05565b602082019050919050565b6000613103601c83613965565b915061310e82613d2e565b601c82019050919050565b6000613126602c83613954565b915061313182613d57565b604082019050919050565b6000613149602283613954565b915061315482613da6565b604082019050919050565b600061316c601083613954565b915061317782613df5565b602082019050919050565b600061318f602d83613954565b915061319a82613e1e565b604082019050919050565b60006131b2602e83613954565b91506131bd82613e6d565b604082019050919050565b60006131d5602283613954565b91506131e082613ebc565b604082019050919050565b60006131f8602f83613954565b915061320382613f0b565b604082019050919050565b600061321b603083613954565b915061322682613f5a565b604082019050919050565b600061323e602483613954565b915061324982613fa9565b604082019050919050565b6000613261602983613954565b915061326c82613ff8565b604082019050919050565b6000613284604683613954565b915061328f82614047565b606082019050919050565b60006132a7601783613965565b91506132b2826140bc565b601782019050919050565b60006132ca603383613954565b91506132d5826140e5565b604082019050919050565b60006132ed602b83613954565b91506132f882614134565b604082019050919050565b6000613310601183613965565b915061331b82614183565b601182019050919050565b6000613333602f83613954565b915061333e826141ac565b604082019050919050565b60808201600082015161335f600085018261339e565b506020820151613372602085018261339e565b5060408201516133856040850182612eb4565b5060608201516133986060850182612f99565b50505050565b6133a781613a94565b82525050565b6133b681613a94565b82525050565b6133c581613a9e565b82525050565b60006133d7828b612ed2565b6014820191506133e882898b612f41565b91506133f5828789612f41565b9150613402828587612f41565b915061340e8284612fc6565b6020820191508190509998505050505050505050565b600061342f826130f6565b915061343b8284612fc6565b60208201915081905092915050565b60006134558261329a565b91506134618285613016565b915061346c82613303565b91506134788284613016565b91508190509392505050565b60006020820190506134996000830184612ec3565b92915050565b60006060820190506134b46000830186612ec3565b6134c16020830185612ec3565b6134ce60408301846133ad565b949350505050565b60006080820190506134eb600083018a612ec3565b81810360208301526134fe81888a612ee9565b90508181036040830152613513818688612ee9565b90508181036060830152613528818486612ee9565b905098975050505050505050565b600060408201905061354b6000830185612ec3565b61355860208301846133ad565b9392505050565b60006020820190506135746000830184612fa8565b92915050565b600060208201905061358f6000830184612fb7565b92915050565b60006080820190506135aa6000830187612fb7565b6135b760208301866133bc565b6135c46040830185612fb7565b6135d16060830184612fb7565b95945050505050565b600060208201905081810360008301526135f48184612fdd565b905092915050565b6000602082019050818103600083015261361581613047565b9050919050565b600060208201905081810360008301526136358161306a565b9050919050565b600060208201905081810360008301526136558161308d565b9050919050565b60006020820190508181036000830152613675816130b0565b9050919050565b60006020820190508181036000830152613695816130d3565b9050919050565b600060208201905081810360008301526136b581613119565b9050919050565b600060208201905081810360008301526136d58161313c565b9050919050565b600060208201905081810360008301526136f58161315f565b9050919050565b6000602082019050818103600083015261371581613182565b9050919050565b60006020820190508181036000830152613735816131a5565b9050919050565b60006020820190508181036000830152613755816131c8565b9050919050565b60006020820190508181036000830152613775816131eb565b9050919050565b600060208201905081810360008301526137958161320e565b9050919050565b600060208201905081810360008301526137b581613231565b9050919050565b600060208201905081810360008301526137d581613254565b9050919050565b600060208201905081810360008301526137f581613277565b9050919050565b60006020820190508181036000830152613815816132bd565b9050919050565b60006020820190508181036000830152613835816132e0565b9050919050565b6000602082019050818103600083015261385581613326565b9050919050565b60006080820190506138716000830184613349565b92915050565b600060208201905061388c60008301846133ad565b92915050565b60006080820190506138a760008301876133ad565b6138b460208301866133ad565b6138c16040830185612ec3565b6138ce6060830184612fa8565b95945050505050565b60006138e16138f2565b90506138ed8282613b17565b919050565b6000604051905090565b600067ffffffffffffffff82111561391757613916613bee565b5b61392082613c1d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061397b82613a94565b915061398683613a94565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139bb576139ba613bbf565b5b828201905092915050565b60006139d182613a94565b91506139dc83613a94565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a1557613a14613bbf565b5b828202905092915050565b6000613a2b82613a74565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613ad8578082015181840152602081019050613abd565b83811115613ae7576000848401525b50505050565b6000613af882613a94565b91506000821415613b0c57613b0b613bbf565b5b600182039050919050565b613b2082613c1d565b810181811067ffffffffffffffff82111715613b3f57613b3e613bee565b5b80604052505050565b6000613b5382613a94565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b8657613b85613bbf565b5b600182019050919050565b6000613b9c82613bad565b9050919050565b6000819050919050565b6000613bb882613c2e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204d657373616765207760008201527f6173206e6f74207369676e6564206279207369676e6572000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204172726179206c656e60008201527f677468206d69736d617463680000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204e6f6e63652077617360008201527f20616c7265616479207573656400000000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204974656d207365726960008201527f6573204944206d69736d61746368000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a2043616e6e6f7420707560008201527f726368617365203020746f6b656e730000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204974656d207365726960008201527f6573206973206e6f742061637469766500000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a2048617368206d69736d60008201527f6174636800000000000000000000000000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a2045544820707269636560008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a205072696365206d757360008201527f7420626520646566696e656420696e2065697468657220616e2045524332302060208201527f6f72204554480000000000000000000000000000000000000000000000000000604082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204974656d207365726960008201527f6573204944206f7574206f6620626f756e647300000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204e6f206974656d732060008201527f746f207075726368617365000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61420481613a20565b811461420f57600080fd5b50565b61421b81613a32565b811461422657600080fd5b50565b61423281613a3e565b811461423d57600080fd5b50565b61424981613a48565b811461425457600080fd5b50565b61426081613a94565b811461426b57600080fd5b5056fea2646970667358221220f59aa280c88887b2f7a8ce6f88620832ae6b2bfe850bf6c9565242ab389c096864736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80638456cb59116100ec578063ced3a4031161008a578063da74222811610064578063da742228146105ea578063e3946de614610613578063e63ab1e91461063e578063e744502314610669576101b7565b8063ced3a40314610556578063d547741f14610581578063d6b842c1146105aa576101b7565b8063bd1f4b52116100c6578063bd1f4b52146104ae578063c311d049146104d7578063cb7b9c2314610500578063ce1b815f1461052b576101b7565b80638456cb591461042f57806391d1485414610446578063a217fddf14610483576101b7565b80633f4ba83a116101595780635c975abb116101335780635c975abb146103875780636017a20b146103b25780636c19e783146103db5780637ac3c02f14610404576101b7565b80633f4ba83a1461031757806343d496c31461032e578063572b6c051461034a576101b7565b8063248a9ca311610195578063248a9ca31461024b5780632f2ff15d1461028857806336568abe146102b1578063385596ec146102da576101b7565b806301ffc9a7146101bc5780631274d1f5146101f95780631e185ced14610222575b600080fd5b3480156101c857600080fd5b506101e360048036038101906101de9190612dfd565b6106a6565b6040516101f0919061355f565b60405180910390f35b34801561020557600080fd5b50610220600480360381019061021b9190612b45565b610720565b005b34801561022e57600080fd5b5061024960048036038101906102449190612baa565b610772565b005b34801561025757600080fd5b50610272600480360381019061026d9190612d98565b610b53565b60405161027f919061357a565b60405180910390f35b34801561029457600080fd5b506102af60048036038101906102aa9190612dc1565b610b72565b005b3480156102bd57600080fd5b506102d860048036038101906102d39190612dc1565b610b93565b005b3480156102e657600080fd5b5061030160048036038101906102fc9190612e4f565b610c16565b60405161030e9190613877565b60405180910390f35b34801561032357600080fd5b5061032c610c36565b005b61034860048036038101906103439190612bef565b610c6b565b005b34801561035657600080fd5b50610371600480360381019061036c9190612b45565b6113a4565b60405161037e919061355f565b60405180910390f35b34801561039357600080fd5b5061039c6113fc565b6040516103a9919061355f565b60405180910390f35b3480156103be57600080fd5b506103d960048036038101906103d49190612d0f565b611413565b005b3480156103e757600080fd5b5061040260048036038101906103fd9190612b45565b61165e565b005b34801561041057600080fd5b506104196116b0565b6040516104269190613484565b60405180910390f35b34801561043b57600080fd5b506104446116da565b005b34801561045257600080fd5b5061046d60048036038101906104689190612dc1565b61170f565b60405161047a919061355f565b60405180910390f35b34801561048f57600080fd5b50610498611779565b6040516104a5919061357a565b60405180910390f35b3480156104ba57600080fd5b506104d560048036038101906104d09190612b6e565b611780565b005b3480156104e357600080fd5b506104fe60048036038101906104f99190612e4f565b611844565b005b34801561050c57600080fd5b506105156118c0565b604051610522919061357a565b60405180910390f35b34801561053757600080fd5b506105406118e4565b60405161054d9190613484565b60405180910390f35b34801561056257600080fd5b5061056b61190c565b604051610578919061357a565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a39190612dc1565b611930565b005b3480156105b657600080fd5b506105d160048036038101906105cc9190612e78565b611951565b6040516105e19493929190613892565b60405180910390f35b3480156105f657600080fd5b50610611600480360381019061060c9190612b45565b6119cb565b005b34801561061f57600080fd5b506106286119e5565b6040516106359190613484565b60405180910390f35b34801561064a57600080fd5b50610653611a0f565b604051610660919061357a565b60405180910390f35b34801561067557600080fd5b50610690600480360381019061068b9190612e78565b611a33565b60405161069d919061385c565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610719575061071882611bbb565b5b9050919050565b6000801b61072d81611c25565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d361079c81611c25565b60005b83839050811015610b4d5760008484838181106107e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060c002018036038101906107fb9190612e26565b9050600060026000836000015181526020019081526020016000209050816020015181805490501015610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a9061371c565b60405180910390fd5b6000826040015111806108b75750600082606001511180156108b65750600073ffffffffffffffffffffffffffffffffffffffff16826080015173ffffffffffffffffffffffffffffffffffffffff1614155b5b6108f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ed906137dc565b60405180910390fd5b6108fe6128ef565b8260a0015181606001901515908115158152505082604001518160000181815250508260800151816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508260600151816020018181525050818054905083602001511015610a495780828460200151815481106109b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff021916908315150217905550905050610af2565b81819080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555050505b826020015183600001517f05eabaccae5157b89020277c06586f88aabdfcc80f9dd2f3b613690da30494108560a00151604051610b2f919061355f565b60405180910390a35050508080610b4590613b48565b91505061079f565b50505050565b6000806000838152602001908152602001600020600101549050919050565b610b7b82610b53565b610b8481611c25565b610b8e8383611c39565b505050565b610b9b611d19565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bff9061383c565b60405180910390fd5b610c128282611d28565b5050565b600060026000838152602001908152602001600020805490509050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610c6081611c25565b610c68611e09565b50565b610c73611e6c565b610c7d8282611eb6565b610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb39061363c565b60405180910390fd5b6004600084815260200190815260200160002060009054906101000a900460ff1615610d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d14906136fc565b60405180910390fd5b81610d35610d29611d19565b8b8b8b8b8b8b8b611f23565b14610d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6c9061379c565b60405180910390fd5b8686905089899050148015610d8f57508484905089899050145b610dce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc59061369c565b60405180910390fd5b60008989905011610e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0b9061381c565b60405180910390fd5b6000806000805b8c8c90508110156111ad576000898983818110610e61577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013511610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f9061375c565b60405180910390fd5b6000610f328e8e84818110610ee6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358d8d85818110610f26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135611a33565b90508060600151610f78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6f9061377c565b60405180910390fd5b600081600001511115610fe657898983818110610fbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358160000151610fd491906139c6565b85610fdf9190613970565b9450611199565b806040015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146111035760008411801561105a5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156110fb578273ffffffffffffffffffffffffffffffffffffffff166323b872dd611083611d19565b30876040518463ffffffff1660e01b81526004016110a39392919061349f565b602060405180830381600087803b1580156110bd57600080fd5b505af11580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f59190612ce6565b50600093505b806040015192505b806040015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561119857898983818110611174577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135816020015161118a91906139c6565b846111959190613970565b93505b5b5080806111a590613b48565b915050610e1b565b503483146111f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e7906137bc565b60405180910390fd5b60016004600088815260200190815260200160002060006101000a81548160ff0219169083151502179055506000821180156112595750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156112f6578073ffffffffffffffffffffffffffffffffffffffff166323b872dd611282611d19565b30856040518463ffffffff1660e01b81526004016112a29392919061349f565b602060405180830381600087803b1580156112bc57600080fd5b505af11580156112d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f49190612ce6565b505b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d05159d61133c611d19565b8e8e8e8e8e8e6040518863ffffffff1660e01b815260040161136497969594939291906134d6565b600060405180830381600087803b15801561137e57600080fd5b505af1158015611392573d6000803e3d6000fd5b50505050505050505050505050505050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600160009054906101000a900460ff16905090565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d361143d81611c25565b828290508585905014611485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147c9061369c565b60405180910390fd5b60005b85859050811015611655576000600260008888858181106114d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358152602001908152602001600020858584818110611520577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358154811061155e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302019050878160020160146101000a81548160ff0219169083151502179055508484838181106115c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135878784818110611603577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201357f05eabaccae5157b89020277c06586f88aabdfcc80f9dd2f3b613690da30494108a604051611639919061355f565b60405180910390a350808061164d90613b48565b915050611488565b50505050505050565b6000801b61166b81611c25565b81600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61170481611c25565b61170c611f93565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e6117aa81611c25565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6117ce611d19565b846040518363ffffffff1660e01b81526004016117ec929190613536565b602060405180830381600087803b15801561180657600080fd5b505af115801561181a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183e9190612ce6565b50505050565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e61186e81611c25565b611876611d19565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156118bb573d6000803e3d6000fd5b505050565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d381565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e81565b61193982610b53565b61194281611c25565b61194c8383611d28565b505050565b6002602052816000526040600020818154811061196d57600080fd5b9060005260206000209060030201600091509150508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16905084565b6000801b6119d881611c25565b6119e182611ff5565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b611a3b6128ef565b81600260008581526020019081526020016000208054905011611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a906137fc565b60405180910390fd5b600260008481526020019081526020016000208281548110611ade577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581525050905092915050565b60006014600036905010158015611ba05750611b9f336113a4565b5b15611bb457601436033560601c9050611bb8565b3390505b90565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611c3681611c31611d19565b612038565b50565b611c43828261170f565b611d1557600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611cba611d19565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611d23611b84565b905090565b611d32828261170f565b15611e0557600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611daa611d19565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611e116120d5565b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611e55611d19565b604051611e629190613484565b60405180910390a1565b611e746113fc565b15611eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eab906136dc565b60405180910390fd5b565b6000611ecb828461211e90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6000808989898989898989604051602001611f459897969594939291906133cb565b60405160208183030381529060405280519060200120604051602001611f6b9190613424565b6040516020818303038152906040528051906020012090508091505098975050505050505050565b611f9b611e6c565b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611fde611d19565b604051611feb9190613484565b60405180910390a1565b806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612042828261170f565b6120d1576120678173ffffffffffffffffffffffffffffffffffffffff166014612145565b6120758360001c6020612145565b60405160200161208692919061344a565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c891906135da565b60405180910390fd5b5050565b6120dd6113fc565b61211c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121139061365c565b60405180910390fd5b565b600080600061212d858561243f565b9150915061213a81612491565b819250505092915050565b60606000600283600261215891906139c6565b6121629190613970565b67ffffffffffffffff8111156121a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121d35781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612231577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026122fb91906139c6565b6123059190613970565b90505b60018111156123f1577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061236d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b8282815181106123aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806123ea90613aed565b9050612308565b5060008414612435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242c9061361c565b60405180910390fd5b8091505092915050565b6000806041835114156124815760008060006020860151925060408601519150606086015160001a9050612475878285856127e2565b9450945050505061248a565b60006002915091505b9250929050565b600060048111156124cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612504577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561250f576127df565b60016004811115612549577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612582577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156125c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ba906135fc565b60405180910390fd5b600260048111156125fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612636577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266e9061367c565b60405180910390fd5b600360048111156126b1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156126ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561272b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612722906136bc565b60405180910390fd5b600480811115612764577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561279d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156127de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d59061373c565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561281d5760006003915091506128e6565b601b8560ff16141580156128355750601c8560ff1614155b156128475760006004915091506128e6565b60006001878787876040516000815260200160405260405161286c9493929190613595565b6020604051602081039080840390855afa15801561288e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156128dd576000600192509250506128e6565b80600092509250505b94509492505050565b60405180608001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600061294261293d846138fc565b6138d7565b90508281526020810184848401111561295a57600080fd5b612965848285613aab565b509392505050565b60008135905061297c816141fb565b92915050565b60008083601f84011261299457600080fd5b8235905067ffffffffffffffff8111156129ad57600080fd5b6020830191508360c08202830111156129c557600080fd5b9250929050565b60008083601f8401126129de57600080fd5b8235905067ffffffffffffffff8111156129f757600080fd5b602083019150836020820283011115612a0f57600080fd5b9250929050565b600081359050612a2581614212565b92915050565b600081519050612a3a81614212565b92915050565b600081359050612a4f81614229565b92915050565b600081359050612a6481614240565b92915050565b600082601f830112612a7b57600080fd5b8135612a8b84826020860161292f565b91505092915050565b600060c08284031215612aa657600080fd5b612ab060c06138d7565b90506000612ac084828501612b30565b6000830152506020612ad484828501612b30565b6020830152506040612ae884828501612b30565b6040830152506060612afc84828501612b30565b6060830152506080612b108482850161296d565b60808301525060a0612b2484828501612a16565b60a08301525092915050565b600081359050612b3f81614257565b92915050565b600060208284031215612b5757600080fd5b6000612b658482850161296d565b91505092915050565b60008060408385031215612b8157600080fd5b6000612b8f8582860161296d565b9250506020612ba085828601612b30565b9150509250929050565b60008060208385031215612bbd57600080fd5b600083013567ffffffffffffffff811115612bd757600080fd5b612be385828601612982565b92509250509250929050565b600080600080600080600080600060c08a8c031215612c0d57600080fd5b60008a013567ffffffffffffffff811115612c2757600080fd5b612c338c828d016129cc565b995099505060208a013567ffffffffffffffff811115612c5257600080fd5b612c5e8c828d016129cc565b975097505060408a013567ffffffffffffffff811115612c7d57600080fd5b612c898c828d016129cc565b95509550506060612c9c8c828d01612a40565b9350506080612cad8c828d01612a40565b92505060a08a013567ffffffffffffffff811115612cca57600080fd5b612cd68c828d01612a6a565b9150509295985092959850929598565b600060208284031215612cf857600080fd5b6000612d0684828501612a2b565b91505092915050565b600080600080600060608688031215612d2757600080fd5b6000612d3588828901612a16565b955050602086013567ffffffffffffffff811115612d5257600080fd5b612d5e888289016129cc565b9450945050604086013567ffffffffffffffff811115612d7d57600080fd5b612d89888289016129cc565b92509250509295509295909350565b600060208284031215612daa57600080fd5b6000612db884828501612a40565b91505092915050565b60008060408385031215612dd457600080fd5b6000612de285828601612a40565b9250506020612df38582860161296d565b9150509250929050565b600060208284031215612e0f57600080fd5b6000612e1d84828501612a55565b91505092915050565b600060c08284031215612e3857600080fd5b6000612e4684828501612a94565b91505092915050565b600060208284031215612e6157600080fd5b6000612e6f84828501612b30565b91505092915050565b60008060408385031215612e8b57600080fd5b6000612e9985828601612b30565b9250506020612eaa85828601612b30565b9150509250929050565b612ebd81613a20565b82525050565b612ecc81613a20565b82525050565b612ee3612ede82613a20565b613b91565b82525050565b6000612ef58385613938565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612f2457600080fd5b602083029250612f35838584613aab565b82840190509392505050565b6000612f4d8385613949565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612f7c57600080fd5b602083029250612f8d838584613aab565b82840190509392505050565b612fa281613a32565b82525050565b612fb181613a32565b82525050565b612fc081613a3e565b82525050565b612fd7612fd282613a3e565b613ba3565b82525050565b6000612fe88261392d565b612ff28185613954565b9350613002818560208601613aba565b61300b81613c1d565b840191505092915050565b60006130218261392d565b61302b8185613965565b935061303b818560208601613aba565b80840191505092915050565b6000613054601883613954565b915061305f82613c3b565b602082019050919050565b6000613077602083613954565b915061308282613c64565b602082019050919050565b600061309a603783613954565b91506130a582613c8d565b604082019050919050565b60006130bd601483613954565b91506130c882613cdc565b602082019050919050565b60006130e0601f83613954565b91506130eb82613d05565b602082019050919050565b6000613103601c83613965565b915061310e82613d2e565b601c82019050919050565b6000613126602c83613954565b915061313182613d57565b604082019050919050565b6000613149602283613954565b915061315482613da6565b604082019050919050565b600061316c601083613954565b915061317782613df5565b602082019050919050565b600061318f602d83613954565b915061319a82613e1e565b604082019050919050565b60006131b2602e83613954565b91506131bd82613e6d565b604082019050919050565b60006131d5602283613954565b91506131e082613ebc565b604082019050919050565b60006131f8602f83613954565b915061320382613f0b565b604082019050919050565b600061321b603083613954565b915061322682613f5a565b604082019050919050565b600061323e602483613954565b915061324982613fa9565b604082019050919050565b6000613261602983613954565b915061326c82613ff8565b604082019050919050565b6000613284604683613954565b915061328f82614047565b606082019050919050565b60006132a7601783613965565b91506132b2826140bc565b601782019050919050565b60006132ca603383613954565b91506132d5826140e5565b604082019050919050565b60006132ed602b83613954565b91506132f882614134565b604082019050919050565b6000613310601183613965565b915061331b82614183565b601182019050919050565b6000613333602f83613954565b915061333e826141ac565b604082019050919050565b60808201600082015161335f600085018261339e565b506020820151613372602085018261339e565b5060408201516133856040850182612eb4565b5060608201516133986060850182612f99565b50505050565b6133a781613a94565b82525050565b6133b681613a94565b82525050565b6133c581613a9e565b82525050565b60006133d7828b612ed2565b6014820191506133e882898b612f41565b91506133f5828789612f41565b9150613402828587612f41565b915061340e8284612fc6565b6020820191508190509998505050505050505050565b600061342f826130f6565b915061343b8284612fc6565b60208201915081905092915050565b60006134558261329a565b91506134618285613016565b915061346c82613303565b91506134788284613016565b91508190509392505050565b60006020820190506134996000830184612ec3565b92915050565b60006060820190506134b46000830186612ec3565b6134c16020830185612ec3565b6134ce60408301846133ad565b949350505050565b60006080820190506134eb600083018a612ec3565b81810360208301526134fe81888a612ee9565b90508181036040830152613513818688612ee9565b90508181036060830152613528818486612ee9565b905098975050505050505050565b600060408201905061354b6000830185612ec3565b61355860208301846133ad565b9392505050565b60006020820190506135746000830184612fa8565b92915050565b600060208201905061358f6000830184612fb7565b92915050565b60006080820190506135aa6000830187612fb7565b6135b760208301866133bc565b6135c46040830185612fb7565b6135d16060830184612fb7565b95945050505050565b600060208201905081810360008301526135f48184612fdd565b905092915050565b6000602082019050818103600083015261361581613047565b9050919050565b600060208201905081810360008301526136358161306a565b9050919050565b600060208201905081810360008301526136558161308d565b9050919050565b60006020820190508181036000830152613675816130b0565b9050919050565b60006020820190508181036000830152613695816130d3565b9050919050565b600060208201905081810360008301526136b581613119565b9050919050565b600060208201905081810360008301526136d58161313c565b9050919050565b600060208201905081810360008301526136f58161315f565b9050919050565b6000602082019050818103600083015261371581613182565b9050919050565b60006020820190508181036000830152613735816131a5565b9050919050565b60006020820190508181036000830152613755816131c8565b9050919050565b60006020820190508181036000830152613775816131eb565b9050919050565b600060208201905081810360008301526137958161320e565b9050919050565b600060208201905081810360008301526137b581613231565b9050919050565b600060208201905081810360008301526137d581613254565b9050919050565b600060208201905081810360008301526137f581613277565b9050919050565b60006020820190508181036000830152613815816132bd565b9050919050565b60006020820190508181036000830152613835816132e0565b9050919050565b6000602082019050818103600083015261385581613326565b9050919050565b60006080820190506138716000830184613349565b92915050565b600060208201905061388c60008301846133ad565b92915050565b60006080820190506138a760008301876133ad565b6138b460208301866133ad565b6138c16040830185612ec3565b6138ce6060830184612fa8565b95945050505050565b60006138e16138f2565b90506138ed8282613b17565b919050565b6000604051905090565b600067ffffffffffffffff82111561391757613916613bee565b5b61392082613c1d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061397b82613a94565b915061398683613a94565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139bb576139ba613bbf565b5b828201905092915050565b60006139d182613a94565b91506139dc83613a94565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a1557613a14613bbf565b5b828202905092915050565b6000613a2b82613a74565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613ad8578082015181840152602081019050613abd565b83811115613ae7576000848401525b50505050565b6000613af882613a94565b91506000821415613b0c57613b0b613bbf565b5b600182039050919050565b613b2082613c1d565b810181811067ffffffffffffffff82111715613b3f57613b3e613bee565b5b80604052505050565b6000613b5382613a94565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b8657613b85613bbf565b5b600182019050919050565b6000613b9c82613bad565b9050919050565b6000819050919050565b6000613bb882613c2e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204d657373616765207760008201527f6173206e6f74207369676e6564206279207369676e6572000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204172726179206c656e60008201527f677468206d69736d617463680000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204e6f6e63652077617360008201527f20616c7265616479207573656400000000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204974656d207365726960008201527f6573204944206d69736d61746368000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a2043616e6e6f7420707560008201527f726368617365203020746f6b656e730000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204974656d207365726960008201527f6573206973206e6f742061637469766500000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a2048617368206d69736d60008201527f6174636800000000000000000000000000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a2045544820707269636560008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a205072696365206d757360008201527f7420626520646566696e656420696e2065697468657220616e2045524332302060208201527f6f72204554480000000000000000000000000000000000000000000000000000604082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204974656d207365726960008201527f6573204944206f7574206f6620626f756e647300000000000000000000000000602082015250565b7f496e47616d654974656d4d61726b6574706c6163653a204e6f206974656d732060008201527f746f207075726368617365000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b61420481613a20565b811461420f57600080fd5b50565b61421b81613a32565b811461422657600080fd5b50565b61423281613a3e565b811461423d57600080fd5b50565b61424981613a48565b811461425457600080fd5b50565b61426081613a94565b811461426b57600080fd5b5056fea2646970667358221220f59aa280c88887b2f7a8ce6f88620832ae6b2bfe850bf6c9565242ab389c096864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrustedForwarder()": {
        "returns": {
          "forwarder": "The address of the Forwarder contract that is being used."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The address of the Forwarder contract that is being used."
        },
        "returns": {
          "_0": "isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTrustedForwarder()": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."
      },
      "isTrustedForwarder(address)": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2512,
        "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2507_storage)"
      },
      {
        "astId": 3011,
        "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
        "label": "_trustedForwarder",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6481,
        "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
        "label": "itemSeriesPricingMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_struct(ItemSeriesPricing)6475_storage)dyn_storage)"
      },
      {
        "astId": 6484,
        "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
        "label": "_inGameItems",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IInGameItems)8044"
      },
      {
        "astId": 6488,
        "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
        "label": "_nonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 6490,
        "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
        "label": "_signer",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ItemSeriesPricing)6475_storage)dyn_storage": {
        "base": "t_struct(ItemSeriesPricing)6475_storage",
        "encoding": "dynamic_array",
        "label": "struct InGameItemMarketplace.ItemSeriesPricing[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInGameItems)8044": {
        "encoding": "inplace",
        "label": "contract IInGameItems",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2507_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2507_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(ItemSeriesPricing)6475_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InGameItemMarketplace.ItemSeriesPricing[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(ItemSeriesPricing)6475_storage)dyn_storage"
      },
      "t_struct(ItemSeriesPricing)6475_storage": {
        "encoding": "inplace",
        "label": "struct InGameItemMarketplace.ItemSeriesPricing",
        "members": [
          {
            "astId": 6468,
            "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
            "label": "ethPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6470,
            "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
            "label": "erc20Price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6472,
            "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
            "label": "erc20Address",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6474,
            "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
            "label": "active",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)2507_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2504,
            "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2506,
            "contract": "contracts/Marketplace/InGameItemMarketplace.sol:InGameItemMarketplace",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}