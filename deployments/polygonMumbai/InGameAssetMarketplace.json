{
  "address": "0x1Ce7BB9Fbf9801D2B830308F642FFcED22CE7BD8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "storeAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "signer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qty",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "receiptId",
          "type": "uint256"
        }
      ],
      "name": "AssetPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "erc20Price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "AssetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BENEFICIARY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STORE_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        }
      ],
      "name": "activateAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assetMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ethPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "erc20Price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "qtys",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "receiptIds",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer_",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assetId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ethPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "erc20Price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "erc20Address",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct InGameAssetMarketplace.Asset[]",
          "name": "assets",
          "type": "tuple[]"
        }
      ],
      "name": "setupAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f2884cb5aec979850cd3d5fe3e16c2025bd10abb7421040e035090279a9ce48",
  "receipt": {
    "to": null,
    "from": "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "contractAddress": "0x1Ce7BB9Fbf9801D2B830308F642FFcED22CE7BD8",
    "transactionIndex": 6,
    "gasUsed": "3670231",
    "logsBloom": "0x
    "blockHash": "0x53892c860058c08b193266e5120a628f73234593f695dfc93072480e746edd94",
    "transactionHash": "0x7f2884cb5aec979850cd3d5fe3e16c2025bd10abb7421040e035090279a9ce48",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 35781539,
        "transactionHash": "0x7f2884cb5aec979850cd3d5fe3e16c2025bd10abb7421040e035090279a9ce48",
        "address": "0x1Ce7BB9Fbf9801D2B830308F642FFcED22CE7BD8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x53892c860058c08b193266e5120a628f73234593f695dfc93072480e746edd94"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 35781539,
        "transactionHash": "0x7f2884cb5aec979850cd3d5fe3e16c2025bd10abb7421040e035090279a9ce48",
        "address": "0x1Ce7BB9Fbf9801D2B830308F642FFcED22CE7BD8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x53892c860058c08b193266e5120a628f73234593f695dfc93072480e746edd94"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 35781539,
        "transactionHash": "0x7f2884cb5aec979850cd3d5fe3e16c2025bd10abb7421040e035090279a9ce48",
        "address": "0x1Ce7BB9Fbf9801D2B830308F642FFcED22CE7BD8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d3",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x53892c860058c08b193266e5120a628f73234593f695dfc93072480e746edd94"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 35781539,
        "transactionHash": "0x7f2884cb5aec979850cd3d5fe3e16c2025bd10abb7421040e035090279a9ce48",
        "address": "0x1Ce7BB9Fbf9801D2B830308F642FFcED22CE7BD8",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x53892c860058c08b193266e5120a628f73234593f695dfc93072480e746edd94"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 35781539,
        "transactionHash": "0x7f2884cb5aec979850cd3d5fe3e16c2025bd10abb7421040e035090279a9ce48",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fe3ac01fa715a09721266b9db1f9f60d0bf1bdbb",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001ffed9a1bbf5f200000000000000000000000000000000000000000000000008b12c3b86583429000000000000000000000000000000000000000000001f3e554602ee09a0ef1600000000000000000000000000000000000000000000000008912d61e49c3e37000000000000000000000000000000000000000000001f3e556601c7ab5ce508",
        "logIndex": 17,
        "blockHash": "0x53892c860058c08b193266e5120a628f73234593f695dfc93072480e746edd94"
      }
    ],
    "blockNumber": 35781539,
    "cumulativeGasUsed": "4006336",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "0xFe3AC01fA715A09721266B9db1F9f60d0BF1BDbB",
    "0xd8288Ce8348D53887Cb934240B93F5B41B08D4BE",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "3a3067275c3bf21e2bf850f7bb023c30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"storeAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiptId\",\"type\":\"uint256\"}],\"name\":\"AssetPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc20Price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"AssetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BENEFICIARY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STORE_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"}],\"name\":\"activateAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"qtys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"receiptIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer_\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ethPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct InGameAssetMarketplace.Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"}],\"name\":\"setupAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedForwarder()\":{\"returns\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Marketplace/InGameAssetMarketplace.sol\":\"InGameAssetMarketplace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77b3307c570c582969ea5466f296898ab9fea1f8b61b30f1c73345fe047a89a9\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\",\"keccak256\":\"0xc762358681e3494519a5fff2f7e3f0f74f9c9f395f23b00cdfb45e0fb9ef8170\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Marketplace/InGameAssetMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@opengsn/contracts/src/ERC2771Recipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract InGameAssetMarketplace is\\n    AccessControl,\\n    Pausable,\\n    ERC2771Recipient\\n{\\n    using ECDSA for bytes32;\\n\\n    // can pause minting and transfers\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    // can configure assets\\n    bytes32 public constant STORE_ADMIN_ROLE = keccak256(\\\"STORE_ADMIN_ROLE\\\");\\n    // able to withdraw funds\\n    bytes32 public constant BENEFICIARY_ROLE = keccak256(\\\"BENEFICIARY_ROLE\\\");\\n\\n    struct Asset {\\n        uint assetId;\\n        uint ethPrice;\\n        uint erc20Price;\\n        address erc20Address;\\n        bool active;\\n    }\\n\\n    event AssetUpdated(\\n        uint assetId,\\n        uint ethPrice,\\n        uint erc20Price,\\n        address erc20Address,\\n        bool active\\n    );\\n\\n    event AssetPurchased(\\n        address indexed buyer,\\n        uint indexed assetId,\\n        uint qty,\\n        uint indexed receiptId\\n    );\\n\\n    // assetId => Asset\\n    mapping(uint => Asset) public assetMap;\\n    // nonces for signature verification\\n    mapping(bytes32 => bool) internal _nonces;\\n    // signer for signature verification\\n    address internal _signer;\\n\\n    constructor(\\n        address admin,\\n        address pauser,\\n        address storeAdmin,\\n        address beneficiary,\\n        address signer_,\\n        address trustedForwarder_\\n    ) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(PAUSER_ROLE, pauser);\\n        _grantRole(STORE_ADMIN_ROLE, storeAdmin);\\n        _grantRole(BENEFICIARY_ROLE, beneficiary);\\n        _signer = signer_;\\n        _setTrustedForwarder(trustedForwarder_);\\n    }\\n\\n    function purchase(\\n        uint[] calldata assetIds,\\n        uint[] calldata qtys,\\n        uint[] calldata receiptIds,\\n        bytes32 nonce,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) external payable whenNotPaused {\\n        require(\\n            assetIds.length == qtys.length,\\n            \\\"InGameAssetMarketplace: Array length mismatch\\\"\\n        );\\n        require(\\n            assetIds.length > 0,\\n            \\\"InGameAssetMarketplace: No assets to purchase\\\"\\n        );\\n        require(\\n            !_nonces[nonce],\\n            \\\"InGameAssetMarketplace: Nonce was already used\\\"\\n        );\\n        require(\\n            matchAddressSigner(hash, signature),\\n            \\\"InGameAssetMarketplace: Message was not signed by signer\\\"\\n        );\\n        require(\\n            hash == hashTransaction(_msgSender(), assetIds, qtys, receiptIds, nonce),\\n            \\\"InGameAssetMarketplace: Hash mismatch\\\"\\n        );\\n\\n        uint ethPriceTotal = 0;\\n        uint erc20PriceTotal = 0;\\n        address erc20Address = address(0);\\n\\n        for (uint i = 0; i < assetIds.length; i++) {\\n            require(qtys[i] > 0, \\\"InGameAssetMarketplace: Cannot purchase 0 assets\\\");\\n\\n            Asset memory asset = assetMap[assetIds[i]];\\n\\n            require(asset.active, \\\"InGameAssetMarketplace: Asset is not active\\\");\\n\\n            // eth price takes precedence, if both are gt 0\\n            if (asset.ethPrice > 0) {\\n                ethPriceTotal += asset.ethPrice * qtys[i];\\n            } else {\\n                // in order for this to work optimally, itemSeries need to be ordered by erc20Address\\n                if (erc20Address != asset.erc20Address) {\\n                    if (erc20PriceTotal > 0 && erc20Address != address(0)) {\\n                        IERC20(erc20Address).transferFrom(_msgSender(), address(this), erc20PriceTotal);\\n                        erc20PriceTotal = 0;\\n                    }\\n                    erc20Address = asset.erc20Address;\\n                }\\n                if (erc20Address == asset.erc20Address) {\\n                    erc20PriceTotal += asset.erc20Price * qtys[i];\\n                }\\n            }\\n\\n            emit AssetPurchased(_msgSender(), assetIds[i], qtys[i], receiptIds[i]);\\n        }\\n\\n        require(ethPriceTotal == msg.value, \\\"InGameAssetMarketplace: ETH price mismatch\\\");\\n\\n        _nonces[nonce] = true;\\n\\n        if (erc20PriceTotal > 0 && erc20Address != address(0)) {\\n            IERC20(erc20Address).transferFrom(_msgSender(), address(this), erc20PriceTotal);\\n        }\\n    }\\n\\n    function setupAssets(Asset[] calldata assets) external onlyRole(STORE_ADMIN_ROLE) {\\n        for (uint i = 0; i < assets.length; i++) {\\n            require(\\n                assets[i].ethPrice > 0 ||\\n                assets[i].erc20Price > 0 && assets[i].erc20Address != address(0),\\n                \\\"InGameAssetMarketplace: Price must be defined in either an ERC20 or ETH\\\"\\n            );\\n            assetMap[assets[i].assetId] = assets[i];\\n\\n            emit AssetUpdated(\\n                assets[i].assetId,\\n                assets[i].ethPrice,\\n                assets[i].erc20Price,\\n                assets[i].erc20Address,\\n                assets[i].active\\n            );\\n        }\\n    }\\n\\n    function activateAssets(bool active, uint[] calldata assetIds) external onlyRole(STORE_ADMIN_ROLE) {\\n        for (uint i = 0; i < assetIds.length; i++) {\\n            assetMap[assetIds[i]].active = active;\\n\\n            emit AssetUpdated(\\n                assetMap[assetIds[i]].assetId,\\n                assetMap[assetIds[i]].ethPrice,\\n                assetMap[assetIds[i]].erc20Price,\\n                assetMap[assetIds[i]].erc20Address,\\n                active\\n            );\\n        }\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function withdrawEth(uint amount) external onlyRole(BENEFICIARY_ROLE) {\\n        payable(_msgSender()).transfer(amount);\\n    }\\n\\n    function withdrawErc20(address tokenAddress, uint amount) external onlyRole(BENEFICIARY_ROLE) {\\n        IERC20(tokenAddress).transfer(_msgSender(), amount);\\n    }\\n\\n    function setTrustedForwarder(address forwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    function setSigner(address signer_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _signer = signer_;\\n    }\\n\\n    function getSigner() external view returns (address) {\\n        return _signer;\\n    }\\n\\n    function hashTransaction(\\n        address sender,\\n        uint[] calldata assetIds,\\n        uint[] calldata qtys,\\n        uint[] calldata receiptIds,\\n        bytes32 nonce\\n    ) internal pure returns(bytes32) {\\n        bytes32 hash = keccak256(abi.encodePacked(\\n                \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                keccak256(abi.encodePacked(sender, assetIds, qtys, receiptIds, nonce)))\\n        );\\n\\n        return hash;\\n    }\\n\\n    function matchAddressSigner(bytes32 hash, bytes memory signature) internal view returns(bool) {\\n        return _signer == hash.recover(signature);\\n    }\\n\\n    function _msgSender()\\n    internal\\n    view\\n    override(Context, ERC2771Recipient)\\n    returns (address)\\n    {\\n        return ERC2771Recipient._msgSender();\\n    }\\n\\n    function _msgData()\\n    internal\\n    view\\n    override(Context, ERC2771Recipient)\\n    returns (bytes calldata)\\n    {\\n        return ERC2771Recipient._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x10b52132aca333c9d4c22a50d3c0dfcb5e5eaa181a2a555617d20a4671efa2c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004400380380620044008339818101604052810190620000379190620003c6565b6000600160006101000a81548160ff021916908315150217905550620000676000801b876200015b60201b60201c565b620000997f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a866200015b60201b60201c565b620000cb7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d3856200015b60201b60201c565b620000fd7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e846200015b60201b60201c565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200014f816200024c60201b60201c565b505050505050620004aa565b6200016d82826200028f60201b60201c565b6200024857600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001ed620002f960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000620003106200031560201b620019481760201c565b905090565b600060146000369050101580156200033a575062000339336200035760201b60201c565b5b156200035057601436033560601c905062000354565b3390505b90565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600081519050620003c08162000490565b92915050565b60008060008060008060c08789031215620003e057600080fd5b6000620003f089828a01620003af565b96505060206200040389828a01620003af565b95505060406200041689828a01620003af565b94505060606200042989828a01620003af565b93505060806200043c89828a01620003af565b92505060a06200044f89828a01620003af565b9150509295509295509295565b6000620004698262000470565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200049b816200045c565b8114620004a757600080fd5b50565b613f4680620004ba6000396000f3fe60806040526004361061014b5760003560e01c80638456cb59116100b6578063cb7b9c231161006f578063cb7b9c231461046f578063ce1b815f1461049a578063ced3a403146104c5578063d547741f146104f0578063da74222814610519578063e63ab1e9146105425761014b565b80638456cb591461037557806391d148541461038c578063a217fddf146103c9578063ad953cb1146103f4578063bd1f4b521461041d578063c311d049146104465761014b565b80633f4ba83a116101085780633f4ba83a1461028657806343d496c31461029d578063572b6c05146102b95780635c975abb146102f65780636c19e783146103215780637ac3c02f1461034a5761014b565b806301ffc9a7146101505780630ad412331461018d578063129f9008146101b6578063248a9ca3146101f75780632f2ff15d1461023457806336568abe1461025d575b600080fd5b34801561015c57600080fd5b5061017760048036038101906101729190612add565b61056d565b604051610184919061305a565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190612892565b6105e7565b005b3480156101c257600080fd5b506101dd60048036038101906101d89190612b06565b6109db565b6040516101ee959493929190613332565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190612a78565b610a3e565b60405161022b9190613075565b60405180910390f35b34801561024057600080fd5b5061025b60048036038101906102569190612aa1565b610a5d565b005b34801561026957600080fd5b50610284600480360381019061027f9190612aa1565b610a7e565b005b34801561029257600080fd5b5061029b610b01565b005b6102b760048036038101906102b291906128d7565b610b36565b005b3480156102c557600080fd5b506102e060048036038101906102db919061282d565b611336565b6040516102ed919061305a565b60405180910390f35b34801561030257600080fd5b5061030b61138e565b604051610318919061305a565b60405180910390f35b34801561032d57600080fd5b506103486004803603810190610343919061282d565b6113a5565b005b34801561035657600080fd5b5061035f6113f7565b60405161036c9190612fdf565b60405180910390f35b34801561038157600080fd5b5061038a611421565b005b34801561039857600080fd5b506103b360048036038101906103ae9190612aa1565b611456565b6040516103c0919061305a565b60405180910390f35b3480156103d557600080fd5b506103de6114c0565b6040516103eb9190613075565b60405180910390f35b34801561040057600080fd5b5061041b60048036038101906104169190612a20565b6114c7565b005b34801561042957600080fd5b50610444600480360381019061043f9190612856565b611739565b005b34801561045257600080fd5b5061046d60048036038101906104689190612b06565b6117fd565b005b34801561047b57600080fd5b50610484611879565b6040516104919190613075565b60405180910390f35b3480156104a657600080fd5b506104af61189d565b6040516104bc9190612fdf565b60405180910390f35b3480156104d157600080fd5b506104da6118c5565b6040516104e79190613075565b60405180910390f35b3480156104fc57600080fd5b5061051760048036038101906105129190612aa1565b6118e9565b005b34801561052557600080fd5b50610540600480360381019061053b919061282d565b61190a565b005b34801561054e57600080fd5b50610557611924565b6040516105649190613075565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105e057506105df8261197f565b5b9050919050565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d3610611816119e9565b60005b838390508110156109d557600084848381811061065a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a0020160200135118061073b575060008484838181106106a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a002016040013511801561073a5750600073ffffffffffffffffffffffffffffffffffffffff16848483818110610709577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a002016060016020810190610721919061282d565b73ffffffffffffffffffffffffffffffffffffffff1614155b5b61077a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610771906132b7565b60405180910390fd5b8383828181106107b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a00201600260008686858181106107f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a00201600001358152602001908152602001600020818161081a9190613e49565b9050507f7eab742b129ff2fa3052be1afaf393fb4c827b2336366cf2db5ea058464ff82b848483818110610877577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a00201600001358585848181106108ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a00201602001358686858181106108fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a0020160400135878786818110610940577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a002016060016020810190610958919061282d565b888887818110610991577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a0020160800160208101906109a991906129ce565b6040516109ba959493929190613332565b60405180910390a180806109cd906136e8565b915050610614565b50505050565b60026020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a900460ff16905085565b6000806000838152602001908152602001600020600101549050919050565b610a6682610a3e565b610a6f816119e9565b610a7983836119fd565b505050565b610a86611add565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea906132f7565b60405180910390fd5b610afd8282611aec565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b2b816119e9565b610b33611bcd565b50565b610b3e611c30565b868690508989905014610b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7d90613177565b60405180910390fd5b60008989905011610bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc390613277565b60405180910390fd5b6003600084815260200190815260200160002060009054906101000a900460ff1615610c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c24906131d7565b60405180910390fd5b610c378282611c7a565b610c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6d90613197565b60405180910390fd5b610c8d610c81611add565b8a8a8a8a8a8a8a611ce7565b8214610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590613297565b60405180910390fd5b6000806000805b8c8c90508110156111df5760008b8b83818110610d1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013511610d62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5990613257565b60405180910390fd5b6000600260008f8f85818110610da1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff16151515158152505090508060800151610e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8d906132d7565b60405180910390fd5b600081602001511115610f04578b8b83818110610edc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358160200151610ef29190613463565b85610efd919061340d565b94506110b7565b806060015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461102157600084118015610f785750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15611019578273ffffffffffffffffffffffffffffffffffffffff166323b872dd610fa1611add565b30876040518463ffffffff1660e01b8152600401610fc193929190612ffa565b602060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101391906129f7565b50600093505b806060015192505b806060015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110b6578b8b83818110611092577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581604001516110a89190613463565b846110b3919061340d565b93505b5b8989838181106110f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358e8e84818110611130577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013561113f611add565b73ffffffffffffffffffffffffffffffffffffffff167f751dfd922ff4b6048a31e74f71bfe6c58ee9135146d587bf908e12cfa525ae0b8f8f878181106111af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040516111c39190613317565b60405180910390a45080806111d7906136e8565b915050610cd5565b50348314611222576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611219906131b7565b60405180910390fd5b60016003600088815260200190815260200160002060006101000a81548160ff02191690831515021790555060008211801561128b5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15611328578073ffffffffffffffffffffffffffffffffffffffff166323b872dd6112b4611add565b30856040518463ffffffff1660e01b81526004016112d493929190612ffa565b602060405180830381600087803b1580156112ee57600080fd5b505af1158015611302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132691906129f7565b505b505050505050505050505050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600160009054906101000a900460ff16905090565b6000801b6113b2816119e9565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61144b816119e9565b611453611d57565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d36114f1816119e9565b60005b8383905081101561173257846002600086868581811061153d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060030160146101000a81548160ff0219169083151502179055507f7eab742b129ff2fa3052be1afaf393fb4c827b2336366cf2db5ea058464ff82b600260008686858181106115ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581526020019081526020016000206000015460026000878786818110611620577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581526020019081526020016000206001015460026000888887818110611676577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060020154600260008989888181106116cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689604051611717959493929190613332565b60405180910390a1808061172a906136e8565b9150506114f4565b5050505050565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e611763816119e9565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb611787611add565b846040518363ffffffff1660e01b81526004016117a5929190613031565b602060405180830381600087803b1580156117bf57600080fd5b505af11580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f791906129f7565b50505050565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e611827816119e9565b61182f611add565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611874573d6000803e3d6000fd5b505050565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d381565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e81565b6118f282610a3e565b6118fb816119e9565b6119058383611aec565b505050565b6000801b611917816119e9565b61192082611db9565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006014600036905010158015611964575061196333611336565b5b1561197857601436033560601c905061197c565b3390505b90565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6119fa816119f5611add565b611dfc565b50565b611a078282611456565b611ad957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611a7e611add565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611ae7611948565b905090565b611af68282611456565b15611bc957600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b6e611add565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611bd5611e99565b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611c19611add565b604051611c269190612fdf565b60405180910390a1565b611c3861138e565b15611c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6f90613217565b60405180910390fd5b565b6000611c8f8284611ee290919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6000808989898989898989604051602001611d09989796959493929190612f26565b60405160208183030381529060405280519060200120604051602001611d2f9190612f7f565b6040516020818303038152906040528051906020012090508091505098975050505050505050565b611d5f611c30565b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611da2611add565b604051611daf9190612fdf565b60405180910390a1565b806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611e068282611456565b611e9557611e2b8173ffffffffffffffffffffffffffffffffffffffff166014611f09565b611e398360001c6020611f09565b604051602001611e4a929190612fa5565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8c91906130d5565b60405180910390fd5b5050565b611ea161138e565b611ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed790613137565b60405180910390fd5b565b6000806000611ef18585612203565b91509150611efe81612255565b819250505092915050565b606060006002836002611f1c9190613463565b611f26919061340d565b67ffffffffffffffff811115611f65577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f975781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ff5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061207f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026120bf9190613463565b6120c9919061340d565b90505b60018111156121b5577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612131577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061216e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806121ae9061368d565b90506120cc565b50600084146121f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f090613117565b60405180910390fd5b8091505092915050565b6000806041835114156122455760008060006020860151925060408601519150606086015160001a9050612239878285856125a6565b9450945050505061224e565b60006002915091505b9250929050565b6000600481111561228f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156122c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156122d3576125a3565b6001600481111561230d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612346577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237e906130f7565b60405180910390fd5b600260048111156123c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156123fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561243b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243290613157565b60405180910390fd5b60036004811115612475577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156124ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e6906131f7565b60405180910390fd5b600480811115612528577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612561577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156125a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259990613237565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156125e15760006003915091506126aa565b601b8560ff16141580156125f95750601c8560ff1614155b1561260b5760006004915091506126aa565b6000600187878787604051600081526020016040526040516126309493929190613090565b6020604051602081039080840390855afa158015612652573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126a1576000600192509250506126aa565b80600092509250505b94509492505050565b60006126c66126c1846133aa565b613385565b9050828152602081018484840111156126de57600080fd5b6126e98482856135a2565b509392505050565b60008135905061270081613e9d565b92915050565b60008083601f84011261271857600080fd5b8235905067ffffffffffffffff81111561273157600080fd5b6020830191508360a082028301111561274957600080fd5b9250929050565b60008083601f84011261276257600080fd5b8235905067ffffffffffffffff81111561277b57600080fd5b60208301915083602082028301111561279357600080fd5b9250929050565b6000813590506127a981613eb4565b92915050565b6000815190506127be81613eb4565b92915050565b6000813590506127d381613ecb565b92915050565b6000813590506127e881613ee2565b92915050565b600082601f8301126127ff57600080fd5b813561280f8482602086016126b3565b91505092915050565b60008135905061282781613ef9565b92915050565b60006020828403121561283f57600080fd5b600061284d848285016126f1565b91505092915050565b6000806040838503121561286957600080fd5b6000612877858286016126f1565b925050602061288885828601612818565b9150509250929050565b600080602083850312156128a557600080fd5b600083013567ffffffffffffffff8111156128bf57600080fd5b6128cb85828601612706565b92509250509250929050565b600080600080600080600080600060c08a8c0312156128f557600080fd5b60008a013567ffffffffffffffff81111561290f57600080fd5b61291b8c828d01612750565b995099505060208a013567ffffffffffffffff81111561293a57600080fd5b6129468c828d01612750565b975097505060408a013567ffffffffffffffff81111561296557600080fd5b6129718c828d01612750565b955095505060606129848c828d016127c4565b93505060806129958c828d016127c4565b92505060a08a013567ffffffffffffffff8111156129b257600080fd5b6129be8c828d016127ee565b9150509295985092959850929598565b6000602082840312156129e057600080fd5b60006129ee8482850161279a565b91505092915050565b600060208284031215612a0957600080fd5b6000612a17848285016127af565b91505092915050565b600080600060408486031215612a3557600080fd5b6000612a438682870161279a565b935050602084013567ffffffffffffffff811115612a6057600080fd5b612a6c86828701612750565b92509250509250925092565b600060208284031215612a8a57600080fd5b6000612a98848285016127c4565b91505092915050565b60008060408385031215612ab457600080fd5b6000612ac2858286016127c4565b9250506020612ad3858286016126f1565b9150509250929050565b600060208284031215612aef57600080fd5b6000612afd848285016127d9565b91505092915050565b600060208284031215612b1857600080fd5b6000612b2684828501612818565b91505092915050565b612b38816134bd565b82525050565b612b4f612b4a826134bd565b613731565b82525050565b6000612b6183856133e6565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612b9057600080fd5b602083029250612ba18385846135a2565b82840190509392505050565b612bb6816134cf565b82525050565b612bc5816134db565b82525050565b612bdc612bd7826134db565b613743565b82525050565b6000612bed826133db565b612bf781856133f1565b9350612c078185602086016135b1565b612c108161381d565b840191505092915050565b6000612c26826133db565b612c308185613402565b9350612c408185602086016135b1565b80840191505092915050565b6000612c596018836133f1565b9150612c6482613855565b602082019050919050565b6000612c7c6020836133f1565b9150612c878261387e565b602082019050919050565b6000612c9f6014836133f1565b9150612caa826138a7565b602082019050919050565b6000612cc2601f836133f1565b9150612ccd826138d0565b602082019050919050565b6000612ce5601c83613402565b9150612cf0826138f9565b601c82019050919050565b6000612d08602d836133f1565b9150612d1382613922565b604082019050919050565b6000612d2b6038836133f1565b9150612d3682613971565b604082019050919050565b6000612d4e602a836133f1565b9150612d59826139c0565b604082019050919050565b6000612d71602e836133f1565b9150612d7c82613a0f565b604082019050919050565b6000612d946022836133f1565b9150612d9f82613a5e565b604082019050919050565b6000612db76010836133f1565b9150612dc282613aad565b602082019050919050565b6000612dda6022836133f1565b9150612de582613ad6565b604082019050919050565b6000612dfd6030836133f1565b9150612e0882613b25565b604082019050919050565b6000612e20602d836133f1565b9150612e2b82613b74565b604082019050919050565b6000612e436025836133f1565b9150612e4e82613bc3565b604082019050919050565b6000612e666047836133f1565b9150612e7182613c12565b606082019050919050565b6000612e89601783613402565b9150612e9482613c87565b601782019050919050565b6000612eac602b836133f1565b9150612eb782613cb0565b604082019050919050565b6000612ecf601183613402565b9150612eda82613cff565b601182019050919050565b6000612ef2602f836133f1565b9150612efd82613d28565b604082019050919050565b612f1181613531565b82525050565b612f208161353b565b82525050565b6000612f32828b612b3e565b601482019150612f4382898b612b55565b9150612f50828789612b55565b9150612f5d828587612b55565b9150612f698284612bcb565b6020820191508190509998505050505050505050565b6000612f8a82612cd8565b9150612f968284612bcb565b60208201915081905092915050565b6000612fb082612e7c565b9150612fbc8285612c1b565b9150612fc782612ec2565b9150612fd38284612c1b565b91508190509392505050565b6000602082019050612ff46000830184612b2f565b92915050565b600060608201905061300f6000830186612b2f565b61301c6020830185612b2f565b6130296040830184612f08565b949350505050565b60006040820190506130466000830185612b2f565b6130536020830184612f08565b9392505050565b600060208201905061306f6000830184612bad565b92915050565b600060208201905061308a6000830184612bbc565b92915050565b60006080820190506130a56000830187612bbc565b6130b26020830186612f17565b6130bf6040830185612bbc565b6130cc6060830184612bbc565b95945050505050565b600060208201905081810360008301526130ef8184612be2565b905092915050565b6000602082019050818103600083015261311081612c4c565b9050919050565b6000602082019050818103600083015261313081612c6f565b9050919050565b6000602082019050818103600083015261315081612c92565b9050919050565b6000602082019050818103600083015261317081612cb5565b9050919050565b6000602082019050818103600083015261319081612cfb565b9050919050565b600060208201905081810360008301526131b081612d1e565b9050919050565b600060208201905081810360008301526131d081612d41565b9050919050565b600060208201905081810360008301526131f081612d64565b9050919050565b6000602082019050818103600083015261321081612d87565b9050919050565b6000602082019050818103600083015261323081612daa565b9050919050565b6000602082019050818103600083015261325081612dcd565b9050919050565b6000602082019050818103600083015261327081612df0565b9050919050565b6000602082019050818103600083015261329081612e13565b9050919050565b600060208201905081810360008301526132b081612e36565b9050919050565b600060208201905081810360008301526132d081612e59565b9050919050565b600060208201905081810360008301526132f081612e9f565b9050919050565b6000602082019050818103600083015261331081612ee5565b9050919050565b600060208201905061332c6000830184612f08565b92915050565b600060a0820190506133476000830188612f08565b6133546020830187612f08565b6133616040830186612f08565b61336e6060830185612b2f565b61337b6080830184612bad565b9695505050505050565b600061338f6133a0565b905061339b82826136b7565b919050565b6000604051905090565b600067ffffffffffffffff8211156133c5576133c461378e565b5b6133ce8261381d565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061341882613531565b915061342383613531565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134585761345761375f565b5b828201905092915050565b600061346e82613531565b915061347983613531565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134b2576134b161375f565b5b828202905092915050565b60006134c882613511565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006135538261356c565b9050919050565b6000613565826134cf565b9050919050565b60006135778261357e565b9050919050565b600061358982613511565b9050919050565b600061359b82613531565b9050919050565b82818337600083830152505050565b60005b838110156135cf5780820151818401526020810190506135b4565b838111156135de576000848401525b50505050565b6000810160008301806135f681613807565b90506136028184613e57565b50505060018101602083018061361781613807565b90506136238184613e57565b50505060028101604083018061363881613807565b90506136448184613e57565b505050600381016060830180613659816137db565b90506136658184613e26565b50505060038101608083018061367a816137f1565b90506136868184613e7a565b5050505050565b600061369882613531565b915060008214156136ac576136ab61375f565b5b600182039050919050565b6136c08261381d565b810181811067ffffffffffffffff821117156136df576136de61378e565b5b80604052505050565b60006136f382613531565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137265761372561375f565b5b600182019050919050565b600061373c8261374d565b9050919050565b6000819050919050565b600061375882613848565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b6000819050919050565b6000819050919050565b600081356137e881613e9d565b80915050919050565b600081356137fe81613eb4565b80915050919050565b6000813561381481613ef9565b80915050919050565b6000601f19601f8301169050919050565b60008160001b9050919050565b60008160a01b9050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f496e47616d6541737365744d61726b6574706c6163653a204172726179206c6560008201527f6e677468206d69736d6174636800000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a204d6573736167652060008201527f776173206e6f74207369676e6564206279207369676e65720000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a20455448207072696360008201527f65206d69736d6174636800000000000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a204e6f6e636520776160008201527f7320616c72656164792075736564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a2043616e6e6f74207060008201527f7572636861736520302061737365747300000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a204e6f20617373657460008201527f7320746f20707572636861736500000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a2048617368206d697360008201527f6d61746368000000000000000000000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a205072696365206d7560008201527f737420626520646566696e656420696e2065697468657220616e20455243323060208201527f206f722045544800000000000000000000000000000000000000000000000000604082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f496e47616d6541737365744d61726b6574706c6163653a20417373657420697360008201527f206e6f7420616374697665000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600074ff0000000000000000000000000000000000000000613d988461383b565b9350801983169250808416831791505092915050565b600073ffffffffffffffffffffffffffffffffffffffff613dce8461382e565b9350801983169250808416831791505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613e108461382e565b9350801983169250808416831791505092915050565b613e2f82613548565b613e42613e3b826137bd565b8354613dae565b8255505050565b613e5382826135e4565b5050565b613e6082613590565b613e73613e6c826137d1565b8354613de4565b8255505050565b613e838261355a565b613e96613e8f826137c7565b8354613d77565b8255505050565b613ea6816134bd565b8114613eb157600080fd5b50565b613ebd816134cf565b8114613ec857600080fd5b50565b613ed4816134db565b8114613edf57600080fd5b50565b613eeb816134e5565b8114613ef657600080fd5b50565b613f0281613531565b8114613f0d57600080fd5b5056fea264697066735822122096413c84fdd2b304df3bcca55fad9b16ab26cb4f89d2bf422ada254f56f4e18b64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80638456cb59116100b6578063cb7b9c231161006f578063cb7b9c231461046f578063ce1b815f1461049a578063ced3a403146104c5578063d547741f146104f0578063da74222814610519578063e63ab1e9146105425761014b565b80638456cb591461037557806391d148541461038c578063a217fddf146103c9578063ad953cb1146103f4578063bd1f4b521461041d578063c311d049146104465761014b565b80633f4ba83a116101085780633f4ba83a1461028657806343d496c31461029d578063572b6c05146102b95780635c975abb146102f65780636c19e783146103215780637ac3c02f1461034a5761014b565b806301ffc9a7146101505780630ad412331461018d578063129f9008146101b6578063248a9ca3146101f75780632f2ff15d1461023457806336568abe1461025d575b600080fd5b34801561015c57600080fd5b5061017760048036038101906101729190612add565b61056d565b604051610184919061305a565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190612892565b6105e7565b005b3480156101c257600080fd5b506101dd60048036038101906101d89190612b06565b6109db565b6040516101ee959493929190613332565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190612a78565b610a3e565b60405161022b9190613075565b60405180910390f35b34801561024057600080fd5b5061025b60048036038101906102569190612aa1565b610a5d565b005b34801561026957600080fd5b50610284600480360381019061027f9190612aa1565b610a7e565b005b34801561029257600080fd5b5061029b610b01565b005b6102b760048036038101906102b291906128d7565b610b36565b005b3480156102c557600080fd5b506102e060048036038101906102db919061282d565b611336565b6040516102ed919061305a565b60405180910390f35b34801561030257600080fd5b5061030b61138e565b604051610318919061305a565b60405180910390f35b34801561032d57600080fd5b506103486004803603810190610343919061282d565b6113a5565b005b34801561035657600080fd5b5061035f6113f7565b60405161036c9190612fdf565b60405180910390f35b34801561038157600080fd5b5061038a611421565b005b34801561039857600080fd5b506103b360048036038101906103ae9190612aa1565b611456565b6040516103c0919061305a565b60405180910390f35b3480156103d557600080fd5b506103de6114c0565b6040516103eb9190613075565b60405180910390f35b34801561040057600080fd5b5061041b60048036038101906104169190612a20565b6114c7565b005b34801561042957600080fd5b50610444600480360381019061043f9190612856565b611739565b005b34801561045257600080fd5b5061046d60048036038101906104689190612b06565b6117fd565b005b34801561047b57600080fd5b50610484611879565b6040516104919190613075565b60405180910390f35b3480156104a657600080fd5b506104af61189d565b6040516104bc9190612fdf565b60405180910390f35b3480156104d157600080fd5b506104da6118c5565b6040516104e79190613075565b60405180910390f35b3480156104fc57600080fd5b5061051760048036038101906105129190612aa1565b6118e9565b005b34801561052557600080fd5b50610540600480360381019061053b919061282d565b61190a565b005b34801561054e57600080fd5b50610557611924565b6040516105649190613075565b60405180910390f35b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105e057506105df8261197f565b5b9050919050565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d3610611816119e9565b60005b838390508110156109d557600084848381811061065a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a0020160200135118061073b575060008484838181106106a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a002016040013511801561073a5750600073ffffffffffffffffffffffffffffffffffffffff16848483818110610709577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a002016060016020810190610721919061282d565b73ffffffffffffffffffffffffffffffffffffffff1614155b5b61077a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610771906132b7565b60405180910390fd5b8383828181106107b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a00201600260008686858181106107f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a00201600001358152602001908152602001600020818161081a9190613e49565b9050507f7eab742b129ff2fa3052be1afaf393fb4c827b2336366cf2db5ea058464ff82b848483818110610877577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a00201600001358585848181106108ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a00201602001358686858181106108fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a0020160400135878786818110610940577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a002016060016020810190610958919061282d565b888887818110610991577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060a0020160800160208101906109a991906129ce565b6040516109ba959493929190613332565b60405180910390a180806109cd906136e8565b915050610614565b50505050565b60026020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a900460ff16905085565b6000806000838152602001908152602001600020600101549050919050565b610a6682610a3e565b610a6f816119e9565b610a7983836119fd565b505050565b610a86611add565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea906132f7565b60405180910390fd5b610afd8282611aec565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610b2b816119e9565b610b33611bcd565b50565b610b3e611c30565b868690508989905014610b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7d90613177565b60405180910390fd5b60008989905011610bcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc390613277565b60405180910390fd5b6003600084815260200190815260200160002060009054906101000a900460ff1615610c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c24906131d7565b60405180910390fd5b610c378282611c7a565b610c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6d90613197565b60405180910390fd5b610c8d610c81611add565b8a8a8a8a8a8a8a611ce7565b8214610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590613297565b60405180910390fd5b6000806000805b8c8c90508110156111df5760008b8b83818110610d1b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013511610d62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5990613257565b60405180910390fd5b6000600260008f8f85818110610da1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff16151515158152505090508060800151610e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8d906132d7565b60405180910390fd5b600081602001511115610f04578b8b83818110610edc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358160200151610ef29190613463565b85610efd919061340d565b94506110b7565b806060015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461102157600084118015610f785750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15611019578273ffffffffffffffffffffffffffffffffffffffff166323b872dd610fa1611add565b30876040518463ffffffff1660e01b8152600401610fc193929190612ffa565b602060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101391906129f7565b50600093505b806060015192505b806060015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110b6578b8b83818110611092577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581604001516110a89190613463565b846110b3919061340d565b93505b5b8989838181106110f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358e8e84818110611130577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013561113f611add565b73ffffffffffffffffffffffffffffffffffffffff167f751dfd922ff4b6048a31e74f71bfe6c58ee9135146d587bf908e12cfa525ae0b8f8f878181106111af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201356040516111c39190613317565b60405180910390a45080806111d7906136e8565b915050610cd5565b50348314611222576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611219906131b7565b60405180910390fd5b60016003600088815260200190815260200160002060006101000a81548160ff02191690831515021790555060008211801561128b5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15611328578073ffffffffffffffffffffffffffffffffffffffff166323b872dd6112b4611add565b30856040518463ffffffff1660e01b81526004016112d493929190612ffa565b602060405180830381600087803b1580156112ee57600080fd5b505af1158015611302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132691906129f7565b505b505050505050505050505050565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600160009054906101000a900460ff16905090565b6000801b6113b2816119e9565b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61144b816119e9565b611453611d57565b50565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d36114f1816119e9565b60005b8383905081101561173257846002600086868581811061153d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060030160146101000a81548160ff0219169083151502179055507f7eab742b129ff2fa3052be1afaf393fb4c827b2336366cf2db5ea058464ff82b600260008686858181106115ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581526020019081526020016000206000015460026000878786818110611620577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002013581526020019081526020016000206001015460026000888887818110611676577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060020154600260008989888181106116cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1689604051611717959493929190613332565b60405180910390a1808061172a906136e8565b9150506114f4565b5050505050565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e611763816119e9565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb611787611add565b846040518363ffffffff1660e01b81526004016117a5929190613031565b602060405180830381600087803b1580156117bf57600080fd5b505af11580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f791906129f7565b50505050565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e611827816119e9565b61182f611add565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015611874573d6000803e3d6000fd5b505050565b7fd33ef51e3959720bc2ec8f81d4fdc2ae7bbab96194e0ea53925409204d8cc6d381565b600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7fc8a41221bcd7fcf2c225f5a9265e1d4d39949d89197159d59e5f4b87b62c419e81565b6118f282610a3e565b6118fb816119e9565b6119058383611aec565b505050565b6000801b611917816119e9565b61192082611db9565b5050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b60006014600036905010158015611964575061196333611336565b5b1561197857601436033560601c905061197c565b3390505b90565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6119fa816119f5611add565b611dfc565b50565b611a078282611456565b611ad957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611a7e611add565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000611ae7611948565b905090565b611af68282611456565b15611bc957600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611b6e611add565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b611bd5611e99565b6000600160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611c19611add565b604051611c269190612fdf565b60405180910390a1565b611c3861138e565b15611c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6f90613217565b60405180910390fd5b565b6000611c8f8284611ee290919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6000808989898989898989604051602001611d09989796959493929190612f26565b60405160208183030381529060405280519060200120604051602001611d2f9190612f7f565b6040516020818303038152906040528051906020012090508091505098975050505050505050565b611d5f611c30565b60018060006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611da2611add565b604051611daf9190612fdf565b60405180910390a1565b806001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611e068282611456565b611e9557611e2b8173ffffffffffffffffffffffffffffffffffffffff166014611f09565b611e398360001c6020611f09565b604051602001611e4a929190612fa5565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8c91906130d5565b60405180910390fd5b5050565b611ea161138e565b611ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed790613137565b60405180910390fd5b565b6000806000611ef18585612203565b91509150611efe81612255565b819250505092915050565b606060006002836002611f1c9190613463565b611f26919061340d565b67ffffffffffffffff811115611f65577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611f975781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ff5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061207f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026120bf9190613463565b6120c9919061340d565b90505b60018111156121b5577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612131577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061216e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806121ae9061368d565b90506120cc565b50600084146121f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f090613117565b60405180910390fd5b8091505092915050565b6000806041835114156122455760008060006020860151925060408601519150606086015160001a9050612239878285856125a6565b9450945050505061224e565b60006002915091505b9250929050565b6000600481111561228f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156122c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156122d3576125a3565b6001600481111561230d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612346577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612387576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237e906130f7565b60405180910390fd5b600260048111156123c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156123fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561243b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243290613157565b60405180910390fd5b60036004811115612475577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156124ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e6906131f7565b60405180910390fd5b600480811115612528577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612561577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156125a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259990613237565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156125e15760006003915091506126aa565b601b8560ff16141580156125f95750601c8560ff1614155b1561260b5760006004915091506126aa565b6000600187878787604051600081526020016040526040516126309493929190613090565b6020604051602081039080840390855afa158015612652573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156126a1576000600192509250506126aa565b80600092509250505b94509492505050565b60006126c66126c1846133aa565b613385565b9050828152602081018484840111156126de57600080fd5b6126e98482856135a2565b509392505050565b60008135905061270081613e9d565b92915050565b60008083601f84011261271857600080fd5b8235905067ffffffffffffffff81111561273157600080fd5b6020830191508360a082028301111561274957600080fd5b9250929050565b60008083601f84011261276257600080fd5b8235905067ffffffffffffffff81111561277b57600080fd5b60208301915083602082028301111561279357600080fd5b9250929050565b6000813590506127a981613eb4565b92915050565b6000815190506127be81613eb4565b92915050565b6000813590506127d381613ecb565b92915050565b6000813590506127e881613ee2565b92915050565b600082601f8301126127ff57600080fd5b813561280f8482602086016126b3565b91505092915050565b60008135905061282781613ef9565b92915050565b60006020828403121561283f57600080fd5b600061284d848285016126f1565b91505092915050565b6000806040838503121561286957600080fd5b6000612877858286016126f1565b925050602061288885828601612818565b9150509250929050565b600080602083850312156128a557600080fd5b600083013567ffffffffffffffff8111156128bf57600080fd5b6128cb85828601612706565b92509250509250929050565b600080600080600080600080600060c08a8c0312156128f557600080fd5b60008a013567ffffffffffffffff81111561290f57600080fd5b61291b8c828d01612750565b995099505060208a013567ffffffffffffffff81111561293a57600080fd5b6129468c828d01612750565b975097505060408a013567ffffffffffffffff81111561296557600080fd5b6129718c828d01612750565b955095505060606129848c828d016127c4565b93505060806129958c828d016127c4565b92505060a08a013567ffffffffffffffff8111156129b257600080fd5b6129be8c828d016127ee565b9150509295985092959850929598565b6000602082840312156129e057600080fd5b60006129ee8482850161279a565b91505092915050565b600060208284031215612a0957600080fd5b6000612a17848285016127af565b91505092915050565b600080600060408486031215612a3557600080fd5b6000612a438682870161279a565b935050602084013567ffffffffffffffff811115612a6057600080fd5b612a6c86828701612750565b92509250509250925092565b600060208284031215612a8a57600080fd5b6000612a98848285016127c4565b91505092915050565b60008060408385031215612ab457600080fd5b6000612ac2858286016127c4565b9250506020612ad3858286016126f1565b9150509250929050565b600060208284031215612aef57600080fd5b6000612afd848285016127d9565b91505092915050565b600060208284031215612b1857600080fd5b6000612b2684828501612818565b91505092915050565b612b38816134bd565b82525050565b612b4f612b4a826134bd565b613731565b82525050565b6000612b6183856133e6565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612b9057600080fd5b602083029250612ba18385846135a2565b82840190509392505050565b612bb6816134cf565b82525050565b612bc5816134db565b82525050565b612bdc612bd7826134db565b613743565b82525050565b6000612bed826133db565b612bf781856133f1565b9350612c078185602086016135b1565b612c108161381d565b840191505092915050565b6000612c26826133db565b612c308185613402565b9350612c408185602086016135b1565b80840191505092915050565b6000612c596018836133f1565b9150612c6482613855565b602082019050919050565b6000612c7c6020836133f1565b9150612c878261387e565b602082019050919050565b6000612c9f6014836133f1565b9150612caa826138a7565b602082019050919050565b6000612cc2601f836133f1565b9150612ccd826138d0565b602082019050919050565b6000612ce5601c83613402565b9150612cf0826138f9565b601c82019050919050565b6000612d08602d836133f1565b9150612d1382613922565b604082019050919050565b6000612d2b6038836133f1565b9150612d3682613971565b604082019050919050565b6000612d4e602a836133f1565b9150612d59826139c0565b604082019050919050565b6000612d71602e836133f1565b9150612d7c82613a0f565b604082019050919050565b6000612d946022836133f1565b9150612d9f82613a5e565b604082019050919050565b6000612db76010836133f1565b9150612dc282613aad565b602082019050919050565b6000612dda6022836133f1565b9150612de582613ad6565b604082019050919050565b6000612dfd6030836133f1565b9150612e0882613b25565b604082019050919050565b6000612e20602d836133f1565b9150612e2b82613b74565b604082019050919050565b6000612e436025836133f1565b9150612e4e82613bc3565b604082019050919050565b6000612e666047836133f1565b9150612e7182613c12565b606082019050919050565b6000612e89601783613402565b9150612e9482613c87565b601782019050919050565b6000612eac602b836133f1565b9150612eb782613cb0565b604082019050919050565b6000612ecf601183613402565b9150612eda82613cff565b601182019050919050565b6000612ef2602f836133f1565b9150612efd82613d28565b604082019050919050565b612f1181613531565b82525050565b612f208161353b565b82525050565b6000612f32828b612b3e565b601482019150612f4382898b612b55565b9150612f50828789612b55565b9150612f5d828587612b55565b9150612f698284612bcb565b6020820191508190509998505050505050505050565b6000612f8a82612cd8565b9150612f968284612bcb565b60208201915081905092915050565b6000612fb082612e7c565b9150612fbc8285612c1b565b9150612fc782612ec2565b9150612fd38284612c1b565b91508190509392505050565b6000602082019050612ff46000830184612b2f565b92915050565b600060608201905061300f6000830186612b2f565b61301c6020830185612b2f565b6130296040830184612f08565b949350505050565b60006040820190506130466000830185612b2f565b6130536020830184612f08565b9392505050565b600060208201905061306f6000830184612bad565b92915050565b600060208201905061308a6000830184612bbc565b92915050565b60006080820190506130a56000830187612bbc565b6130b26020830186612f17565b6130bf6040830185612bbc565b6130cc6060830184612bbc565b95945050505050565b600060208201905081810360008301526130ef8184612be2565b905092915050565b6000602082019050818103600083015261311081612c4c565b9050919050565b6000602082019050818103600083015261313081612c6f565b9050919050565b6000602082019050818103600083015261315081612c92565b9050919050565b6000602082019050818103600083015261317081612cb5565b9050919050565b6000602082019050818103600083015261319081612cfb565b9050919050565b600060208201905081810360008301526131b081612d1e565b9050919050565b600060208201905081810360008301526131d081612d41565b9050919050565b600060208201905081810360008301526131f081612d64565b9050919050565b6000602082019050818103600083015261321081612d87565b9050919050565b6000602082019050818103600083015261323081612daa565b9050919050565b6000602082019050818103600083015261325081612dcd565b9050919050565b6000602082019050818103600083015261327081612df0565b9050919050565b6000602082019050818103600083015261329081612e13565b9050919050565b600060208201905081810360008301526132b081612e36565b9050919050565b600060208201905081810360008301526132d081612e59565b9050919050565b600060208201905081810360008301526132f081612e9f565b9050919050565b6000602082019050818103600083015261331081612ee5565b9050919050565b600060208201905061332c6000830184612f08565b92915050565b600060a0820190506133476000830188612f08565b6133546020830187612f08565b6133616040830186612f08565b61336e6060830185612b2f565b61337b6080830184612bad565b9695505050505050565b600061338f6133a0565b905061339b82826136b7565b919050565b6000604051905090565b600067ffffffffffffffff8211156133c5576133c461378e565b5b6133ce8261381d565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061341882613531565b915061342383613531565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134585761345761375f565b5b828201905092915050565b600061346e82613531565b915061347983613531565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156134b2576134b161375f565b5b828202905092915050565b60006134c882613511565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006135538261356c565b9050919050565b6000613565826134cf565b9050919050565b60006135778261357e565b9050919050565b600061358982613511565b9050919050565b600061359b82613531565b9050919050565b82818337600083830152505050565b60005b838110156135cf5780820151818401526020810190506135b4565b838111156135de576000848401525b50505050565b6000810160008301806135f681613807565b90506136028184613e57565b50505060018101602083018061361781613807565b90506136238184613e57565b50505060028101604083018061363881613807565b90506136448184613e57565b505050600381016060830180613659816137db565b90506136658184613e26565b50505060038101608083018061367a816137f1565b90506136868184613e7a565b5050505050565b600061369882613531565b915060008214156136ac576136ab61375f565b5b600182039050919050565b6136c08261381d565b810181811067ffffffffffffffff821117156136df576136de61378e565b5b80604052505050565b60006136f382613531565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156137265761372561375f565b5b600182019050919050565b600061373c8261374d565b9050919050565b6000819050919050565b600061375882613848565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b6000819050919050565b6000819050919050565b600081356137e881613e9d565b80915050919050565b600081356137fe81613eb4565b80915050919050565b6000813561381481613ef9565b80915050919050565b6000601f19601f8301169050919050565b60008160001b9050919050565b60008160a01b9050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f496e47616d6541737365744d61726b6574706c6163653a204172726179206c6560008201527f6e677468206d69736d6174636800000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a204d6573736167652060008201527f776173206e6f74207369676e6564206279207369676e65720000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a20455448207072696360008201527f65206d69736d6174636800000000000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a204e6f6e636520776160008201527f7320616c72656164792075736564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a2043616e6e6f74207060008201527f7572636861736520302061737365747300000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a204e6f20617373657460008201527f7320746f20707572636861736500000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a2048617368206d697360008201527f6d61746368000000000000000000000000000000000000000000000000000000602082015250565b7f496e47616d6541737365744d61726b6574706c6163653a205072696365206d7560008201527f737420626520646566696e656420696e2065697468657220616e20455243323060208201527f206f722045544800000000000000000000000000000000000000000000000000604082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f496e47616d6541737365744d61726b6574706c6163653a20417373657420697360008201527f206e6f7420616374697665000000000000000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600074ff0000000000000000000000000000000000000000613d988461383b565b9350801983169250808416831791505092915050565b600073ffffffffffffffffffffffffffffffffffffffff613dce8461382e565b9350801983169250808416831791505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613e108461382e565b9350801983169250808416831791505092915050565b613e2f82613548565b613e42613e3b826137bd565b8354613dae565b8255505050565b613e5382826135e4565b5050565b613e6082613590565b613e73613e6c826137d1565b8354613de4565b8255505050565b613e838261355a565b613e96613e8f826137c7565b8354613d77565b8255505050565b613ea6816134bd565b8114613eb157600080fd5b50565b613ebd816134cf565b8114613ec857600080fd5b50565b613ed4816134db565b8114613edf57600080fd5b50565b613eeb816134e5565b8114613ef657600080fd5b50565b613f0281613531565b8114613f0d57600080fd5b5056fea264697066735822122096413c84fdd2b304df3bcca55fad9b16ab26cb4f89d2bf422ada254f56f4e18b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrustedForwarder()": {
        "returns": {
          "forwarder": "The address of the Forwarder contract that is being used."
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The address of the Forwarder contract that is being used."
        },
        "returns": {
          "_0": "isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTrustedForwarder()": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."
      },
      "isTrustedForwarder(address)": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2512,
        "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2507_storage)"
      },
      {
        "astId": 3011,
        "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
        "label": "_trustedForwarder",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5925,
        "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
        "label": "assetMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Asset)5898_storage)"
      },
      {
        "astId": 5929,
        "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
        "label": "_nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5931,
        "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
        "label": "_signer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2507_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2507_storage"
      },
      "t_mapping(t_uint256,t_struct(Asset)5898_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InGameAssetMarketplace.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)5898_storage"
      },
      "t_struct(Asset)5898_storage": {
        "encoding": "inplace",
        "label": "struct InGameAssetMarketplace.Asset",
        "members": [
          {
            "astId": 5889,
            "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
            "label": "assetId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5891,
            "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
            "label": "ethPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5893,
            "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
            "label": "erc20Price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5895,
            "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
            "label": "erc20Address",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5897,
            "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
            "label": "active",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)2507_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2504,
            "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2506,
            "contract": "contracts/Marketplace/InGameAssetMarketplace.sol:InGameAssetMarketplace",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}